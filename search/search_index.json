{
    "docs": [
        {
            "location": "/", 
            "text": "Important: This documentation is for Pi-hole v4.0 which is currently under development\n\n\n\n\n\n\nNetwork-wide ad blocking via your own Linux hardware\n\n\n\n\n\nThe Pi-hole\n\u00ae\n is a \nDNS\n sinkhole\n that protects your devices from unwanted content, without installing any client-side software.\n\n\n\n\nEasy-to-install\n: our versatile installer walks you through the process, and \ntakes less than ten minutes\n\n\nResolute\n: content is blocked in \nnon-browser locations\n, such as ad-laden mobile apps and smart TVs\n\n\nResponsive\n: seamlessly speeds up the feel of everyday browsing by caching \nDNS\n queries\n\n\nLightweight\n: runs smoothly with \nminimal hardware and software requirements\n\n\nRobust\n: a command line interface that is quality assured for interoperability\n\n\nInsightful\n: a beautiful responsive Web Interface dashboard to view and control your Pi-hole\n\n\nVersatile\n: can optionally function as a \nDHCP\n server\n, ensuring \nall\n your devices are protected automatically\n\n\nScalable\n: \ncapable of handling hundreds of millions of queries\n when installed on server-grade hardware\n\n\nModern\n: blocks ads over both \nIPv4\n and \nIPv6\n\n\nFree\n: open source software which helps ensure \nyou\n are the sole person in control of your privacy\n\n\n\n\n\n\nPi-hole is free, but powered by your support\n\n\nThere are many reoccurring costs involved with maintaining free, open source, and privacy respecting software; expenses which \nour volunteer developers\n pitch in to cover out-of-pocket. This is just one example of how strongly we feel about our software, as well as the importance of keeping it maintained.\n\n\nMake no mistake: \nyour support is absolutely vital to help keep us innovating!\n\n\nDonations\n\n\nSending a donation using our links below is \nextremely helpful\n in offsetting a portion of our monthly expenses:\n\n\n\n\n \nDonate via PayPal\n\n\n \nBitcoin\n: \n\n3MDPzjXu2hjw5sGLJvKUi1uXbvQPzVrbpF\n\n\n \nBitcoin Cash\n: \nqzqsz4aju2eecc6uhs7tus4vlwhhela24sdruf4qp5\n\n\n \nEthereum\n: \n0x79d4e90A4a0C732819526c93e21A3F1356A2FAe1\n\n\n\n\nAlternative support\n\n\nIf you'd rather not \ndonate\n (\nwhich is okay!\n), there are other ways you can help support us:\n\n\n\n\nDigital Ocean\n \naffiliate link\n\n\nUNIXstickers.com\n \nsave $5 when you spend $9 using our affiliate link\n\n\nPi-hole Swag Store\n \naffiliate link\n\n\nAmazon\n \naffiliate link\n\n\nHo-ost\n \nsave 50% with our affiliate link\n\n\nDNS\n Made Easy\n \naffiliate link\n\n\nVultr\n \naffiliate link\n\n\nSpreading the word about our software, and how you have benefited from it\n\n\n\n\nContributing via GitHub\n\n\nWe welcome \neveryone\n to contribute to issue reports, suggest new features, and create pull requests.\n\n\nIf you have something to add - anything from a typo through to a whole new feature, we're happy to check it out! Just make sure to fill out our template when submitting your request; the questions that it asks will help the volunteers quickly understand what you're aiming to achieve.\n\n\nYou'll find that the \ninstall script\n and the \ndebug script\n have an abundance of comments, which will help you better understand how Pi-hole works. They're also a valuable resource to those who want to learn how to write scripts or code a program! We encourage anyone who likes to tinker to read through it, and submit a pull request for us to review.\n\n\nPresentations about Pi-hole\n\n\nWord-of-mouth continues to help our project grow immensely, and so we are helping make this easier for people.\n\n\nIf you are going to be presenting Pi-hole at a conference, meetup or even a school project, \nget in touch with us\n so we can hook you up with free swag to hand out to your audience!\n\n\n\n\nGetting in touch with us\n\n\nWhile we are primarily reachable on our \nDiscourse User Forum\n, we can also be found on a variety of social media outlets. \nPlease be sure to check the FAQ's\n before starting a new discussion, as we do not have the spare time to reply to every request for assistance.\n\n\n\n  \nFrequently Asked Questions\n\n  \nPi-hole Wiki\n\n  \nFeature Requests\n\n\n\n\n\n\n\n\n  \nDiscourse User Forum\n\n  \nReddit\n\n  \nGitter\n (Real-time chat)\n\n  \nTwitter\n\n  \nYouTube\n\n  \nFacebook\n\n\n\n\n\n\nThe Origin Of Pi-hole\n\n\nPi-hole being a \nadvertising-aware \nDNS\n/Web server\n, makes use of the following technologies:\n\n\n\n\ndnsmasq\n - a lightweight \nDNS\n and \nDHCP\n server\n\n\ncurl\n - A command line tool for transferring data with URL syntax\n\n\nlighttpd\n - webserver designed and optimized for high performance\n\n\nphp\n - a popular general-purpose web scripting language\n\n\nAdminLTE Dashboard\n - premium admin control panel based on Bootstrap 3.x\n\n\n\n\nWhile quite outdated at this point, \nthis original blog post about Pi-hole\n goes into \ngreat detail\n about how Pi-hole was originally setup and how it works. Syntactically, it's no longer accurate, but the same basic principles and logic still apply to Pi-hole's current state.\n\n\n\n\nPi-hole Projects\n\n\n\n\nThe Big Blocklist Collection\n\n\nDocker Pi-hole container (x86 and ARM)\n\n\nPi-Hole in the cloud\n\n\nPie in the Sky-Hole [A Pi-Hole in the cloud for ad-blocking via \nDNS\n]\n\n\nPi-hole Enable/Disable Button\n\n\nMinibian Pi-hole\n\n\nCHiP-hole: Network-wide Ad-blocker\n\n\nChrome Extension: Pi-Hole List Editor\n (\nSource Code\n)\n\n\nSplunk: Pi-hole Visualiser\n\n\nAdblocking with Pi-hole and Ubuntu 14.04 on VirtualBox\n\n\nPi-hole stats in your Mac's menu bar\n\n\nPi-hole unRAID Template\n\n\nCopernicus: Windows Tray Application\n\n\nLet your blink1 device blink when Pi-hole filters ads\n\n\nPi-hole metrics\n exporter for \nPrometheus\n\n\nMagic Mirror with \nDNS\n Filtering\n\n\nPi-hole Droid: Android client\n\n\nWindows \nDNS\n Swapper\n, see \n#1400\n\n\nPi-hole Visualizer\n\n\n\n\n\n\nCoverage\n\n\n\n\nLifehacker: Turn A Raspberry Pi Into An Ad Blocker With A Single Command\n\n\nMakeUseOf: Adblock Everywhere: The Raspberry Pi-Hole Way\n\n\nCatchpoint: Ad-Blocking on Apple iOS9: Valuing the End User Experience\n\n\nSecurity Now Netcast: Pi-hole\n\n\nTekThing: Raspberry Pi-Hole Makes Ads Disappear!\n\n\nFoolish Tech Show\n\n\nBlock Ads on All Home Devices for $53.18\n\n\nPi-Hole for Ubuntu 14.04\n\n\nMacObserver Podcast 585\n\n\nThe Defrag Show: Endoscope USB Camera, The Final [HoloLens] Vote, Adblock Pi and more\n\n\nAdafruit: Pi-hole is a black hole for internet ads\n\n\nDigital Trends: 5 Fun, Easy Projects You Can Try With a $35 Raspberry Pi\n\n\nAdafruit: Raspberry Pi Quick Look at Pi Hole ad blocking server with Tony D\n\n\nDevacron: OrangePi Zero as an Ad-Block server with Pi-Hole\n\n\nLinux Pro: The Hole Truth\n\n\nCryptoAUSTRALIA: How We Tried 5 Privacy Focused Raspberry Pi Projects\n\n\nCryptoAUSTRALIA: Pi-hole Workshop\n\n\nKnow How 355: Killing ads with a Raspberry Pi-Hole!\n\n\nBloomberg: Inside the Brotherhood of the Ad Blockers", 
            "title": "Overview & Support"
        }, 
        {
            "location": "/#important-this-documentation-is-for-pi-hole-v40-which-is-currently-under-development", 
            "text": "Network-wide ad blocking via your own Linux hardware   The Pi-hole \u00ae  is a  DNS  sinkhole  that protects your devices from unwanted content, without installing any client-side software.   Easy-to-install : our versatile installer walks you through the process, and  takes less than ten minutes  Resolute : content is blocked in  non-browser locations , such as ad-laden mobile apps and smart TVs  Responsive : seamlessly speeds up the feel of everyday browsing by caching  DNS  queries  Lightweight : runs smoothly with  minimal hardware and software requirements  Robust : a command line interface that is quality assured for interoperability  Insightful : a beautiful responsive Web Interface dashboard to view and control your Pi-hole  Versatile : can optionally function as a  DHCP  server , ensuring  all  your devices are protected automatically  Scalable :  capable of handling hundreds of millions of queries  when installed on server-grade hardware  Modern : blocks ads over both  IPv4  and  IPv6  Free : open source software which helps ensure  you  are the sole person in control of your privacy", 
            "title": "Important: This documentation is for Pi-hole v4.0 which is currently under development"
        }, 
        {
            "location": "/#pi-hole-is-free-but-powered-by-your-support", 
            "text": "There are many reoccurring costs involved with maintaining free, open source, and privacy respecting software; expenses which  our volunteer developers  pitch in to cover out-of-pocket. This is just one example of how strongly we feel about our software, as well as the importance of keeping it maintained.  Make no mistake:  your support is absolutely vital to help keep us innovating!", 
            "title": "Pi-hole is free, but powered by your support"
        }, 
        {
            "location": "/#donations", 
            "text": "Sending a donation using our links below is  extremely helpful  in offsetting a portion of our monthly expenses:     Donate via PayPal    Bitcoin :  \n3MDPzjXu2hjw5sGLJvKUi1uXbvQPzVrbpF    Bitcoin Cash :  qzqsz4aju2eecc6uhs7tus4vlwhhela24sdruf4qp5    Ethereum :  0x79d4e90A4a0C732819526c93e21A3F1356A2FAe1", 
            "title": "Donations"
        }, 
        {
            "location": "/#alternative-support", 
            "text": "If you'd rather not  donate  ( which is okay! ), there are other ways you can help support us:   Digital Ocean   affiliate link  UNIXstickers.com   save $5 when you spend $9 using our affiliate link  Pi-hole Swag Store   affiliate link  Amazon   affiliate link  Ho-ost   save 50% with our affiliate link  DNS  Made Easy   affiliate link  Vultr   affiliate link  Spreading the word about our software, and how you have benefited from it", 
            "title": "Alternative support"
        }, 
        {
            "location": "/#contributing-via-github", 
            "text": "We welcome  everyone  to contribute to issue reports, suggest new features, and create pull requests.  If you have something to add - anything from a typo through to a whole new feature, we're happy to check it out! Just make sure to fill out our template when submitting your request; the questions that it asks will help the volunteers quickly understand what you're aiming to achieve.  You'll find that the  install script  and the  debug script  have an abundance of comments, which will help you better understand how Pi-hole works. They're also a valuable resource to those who want to learn how to write scripts or code a program! We encourage anyone who likes to tinker to read through it, and submit a pull request for us to review.", 
            "title": "Contributing via GitHub"
        }, 
        {
            "location": "/#presentations-about-pi-hole", 
            "text": "Word-of-mouth continues to help our project grow immensely, and so we are helping make this easier for people.  If you are going to be presenting Pi-hole at a conference, meetup or even a school project,  get in touch with us  so we can hook you up with free swag to hand out to your audience!", 
            "title": "Presentations about Pi-hole"
        }, 
        {
            "location": "/#getting-in-touch-with-us", 
            "text": "While we are primarily reachable on our  Discourse User Forum , we can also be found on a variety of social media outlets.  Please be sure to check the FAQ's  before starting a new discussion, as we do not have the spare time to reply to every request for assistance.  \n   Frequently Asked Questions \n   Pi-hole Wiki \n   Feature Requests    \n   Discourse User Forum \n   Reddit \n   Gitter  (Real-time chat) \n   Twitter \n   YouTube \n   Facebook", 
            "title": "Getting in touch with us"
        }, 
        {
            "location": "/#the-origin-of-pi-hole", 
            "text": "Pi-hole being a  advertising-aware  DNS /Web server , makes use of the following technologies:   dnsmasq  - a lightweight  DNS  and  DHCP  server  curl  - A command line tool for transferring data with URL syntax  lighttpd  - webserver designed and optimized for high performance  php  - a popular general-purpose web scripting language  AdminLTE Dashboard  - premium admin control panel based on Bootstrap 3.x   While quite outdated at this point,  this original blog post about Pi-hole  goes into  great detail  about how Pi-hole was originally setup and how it works. Syntactically, it's no longer accurate, but the same basic principles and logic still apply to Pi-hole's current state.", 
            "title": "The Origin Of Pi-hole"
        }, 
        {
            "location": "/#pi-hole-projects", 
            "text": "The Big Blocklist Collection  Docker Pi-hole container (x86 and ARM)  Pi-Hole in the cloud  Pie in the Sky-Hole [A Pi-Hole in the cloud for ad-blocking via  DNS ]  Pi-hole Enable/Disable Button  Minibian Pi-hole  CHiP-hole: Network-wide Ad-blocker  Chrome Extension: Pi-Hole List Editor  ( Source Code )  Splunk: Pi-hole Visualiser  Adblocking with Pi-hole and Ubuntu 14.04 on VirtualBox  Pi-hole stats in your Mac's menu bar  Pi-hole unRAID Template  Copernicus: Windows Tray Application  Let your blink1 device blink when Pi-hole filters ads  Pi-hole metrics  exporter for  Prometheus  Magic Mirror with  DNS  Filtering  Pi-hole Droid: Android client  Windows  DNS  Swapper , see  #1400  Pi-hole Visualizer", 
            "title": "Pi-hole Projects"
        }, 
        {
            "location": "/#coverage", 
            "text": "Lifehacker: Turn A Raspberry Pi Into An Ad Blocker With A Single Command  MakeUseOf: Adblock Everywhere: The Raspberry Pi-Hole Way  Catchpoint: Ad-Blocking on Apple iOS9: Valuing the End User Experience  Security Now Netcast: Pi-hole  TekThing: Raspberry Pi-Hole Makes Ads Disappear!  Foolish Tech Show  Block Ads on All Home Devices for $53.18  Pi-Hole for Ubuntu 14.04  MacObserver Podcast 585  The Defrag Show: Endoscope USB Camera, The Final [HoloLens] Vote, Adblock Pi and more  Adafruit: Pi-hole is a black hole for internet ads  Digital Trends: 5 Fun, Easy Projects You Can Try With a $35 Raspberry Pi  Adafruit: Raspberry Pi Quick Look at Pi Hole ad blocking server with Tony D  Devacron: OrangePi Zero as an Ad-Block server with Pi-Hole  Linux Pro: The Hole Truth  CryptoAUSTRALIA: How We Tried 5 Privacy Focused Raspberry Pi Projects  CryptoAUSTRALIA: Pi-hole Workshop  Know How 355: Killing ads with a Raspberry Pi-Hole!  Bloomberg: Inside the Brotherhood of the Ad Blockers", 
            "title": "Coverage"
        }, 
        {
            "location": "/main/prerequesites/", 
            "text": "Hardware\n\n\nPi-hole is very lightweight, and does not require much processing power\n\n\n\n\n~52MB of free space\n\n\n512MB RAM\n\n\n\n\nDespite the name, you are not limited to running Pi-hole on a Raspberry Pi.\nAny hardware that runs one of the supported operating systems will do!\n\n\nSupported Operating Systems\n\n\nThe following operating systems are \nofficially\n supported:\n\n\n\n\nRaspbian: Jessie / Stretch\n\n\nUbuntu: 16.04 / 16.10\n\n\nFedora: 27 / 28\n\n\nDebian: 8 / 9\n\n\nCentOS: 7 (not ARM)\n\n\n\n\nIP\n Addressing\n\n\nPi-hole needs a static \nIP\n address to properly function (a \nDHCP\n reservation is just fine).  Users may run into issues because \nwe currently install \ndhcpcd5\n, which may conflict with other running network managers\n such as \ndhclient\n, \ndhcpcd\n, \nnetworkmanager\n, and \nsystemd-networkd\n.\n\n\nAs part of our install process, \nwe append some lines to \n/etc/dhcpcd.conf\n in order to statically assign an \nIP\n address\n, so take note of this prior to installing.\n\n\nPlease be aware of this fact because it \nmay cause confusion\n.  This is not the ideal situation for us to be in, but since a significant portion of our users are running Pi-hole on Raspbian; and because Pi-hole's roots began with the Raspberry Pi, it's a problem that is \ndifficult problem to get away from\n.\n\n\nDue to the complexity of different ways of setting an \nIP\n address across different systems, it's a slow process and \nwe need help\n.  If you're willing to contribute, please let us know.\n\n\nPorts\n\n\n\n\n\n\n\n\nService\n\n\nPort\n\n\nProtocol\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\ndnsmasq\n\n\n53  (\nDNS\n)\n\n\nTCP\n/\nUDP\n\n\nIf you happen to have another \nDNS\n server running, such as BIND, you will need to turn it off in order for Pi-hole to respond to \nDNS\n queries.\n\n\n\n\n\n\ndnsmasq\n\n\n67  (\nDHCP\n)\n\n\nIPv4\n \nUDP\n\n\nThe \nDHCP\n server is an optional feature that requires additional ports.\n\n\n\n\n\n\ndnsmasq\n\n\n547 (\nDHCPv6\n)\n\n\nIPv6\n \nUDP\n\n\nThe \nDHCP\n server is an optional feature that requires additional ports.\n\n\n\n\n\n\nlighttpd\n\n\n80  (\nHTTP\n)\n\n\nTCP\n\n\nIf you have another Web server already running, such as Apache, Pi-hole's Web server will not work.  You can either disable the other Web server or change the port on which \nlighttpd\n listens, which allows you keep both Web servers running.\n\n\n\n\n\n\npihole-\nFTL\n\n\n4711\n\n\nTCP\n\n\nFTL\n is our \nAPI\n engine and uses port 4711 on the localhost interface.  This port should not be accessible from any other interface.\n\n\n\n\n\n\n\n\n\n\nInfo\n\n\nThe use of lighttpd on port \n80\n is optional if you decide not to install the Web dashboard during installation.\nThe use of dnsmasq on ports \n67\n or \n547\n is optional, but required if you use the \nDHCP\n functions of Pi-hole.\n\n\n\n\nFirewalls\n\n\nBelow are some examples of firewall rules that will need to be set on your Pi-hole server in order to use the functions available. These are only shown as guides, the actual commands used will be found with your distributions documentation.\n\n\nIPTables\n\n\nIPTables uses two sets of tables. One set is for \nIPv4\n chains, and the second is for \nIPv6\n chains. If only \nIPv4\n blocking is used for the Pi-hole installation, only apply the rules for IP4Tables. Full Stack (\nIPv4\n and \nIPv6\n) require both sets of rules to be applied. \nNote: These examples insert the rules at the front of the chain. Please see your distributions documentation to see the exact proper command to use.\n\n\nIPTables (\nIPv4\n)\n\n\niptables -I INPUT \n1\n -p tcp -m tcp --dport \n80\n -j ACCEPT\niptables -I INPUT \n1\n -p tcp -m tcp --dport \n53\n -j ACCEPT\niptables -I INPUT \n1\n -p udp -m udp --dport \n53\n -j ACCEPT\niptables -I INPUT \n1\n -p udp -m tcp --dport \n67\n -j ACCEPT\niptables -I INPUT \n1\n -p udp -m udp --dport \n67\n -j ACCEPT\niptables -I INPUT \n1\n -p tcp -m tcp --dport \n4711\n -i lo -j ACCEPT\n\n\nIP6Tables (\nIPv6\n)\n\n\nip6tables -I INPUT -p udp -m udp --sport \n546\n:547 --dport \n546\n:547 -j ACCEPT\n\n\n\n\nFirewallD\n\n\nUsing the \n--permanent\n argument will ensure the firewall rules persist reboots. If only \nIPv4\n blocking is used for the Pi-hole installation, the \ndhcpv6\n service can be removed the the commands below. Create a new zone for the local interface (\nlo\n) for the pihole-\nFTL\n ports to ensure the \nAPI\n is only accessible locally. Finally \n--reload\n to have the new firewall configuration take effect immediately.\n\n\nfirewall-cmd --permanent --add-service\n=\nhttp --add-service\n=\ndns --add-service\n=\ndhcp --add-service\n=\ndhcpv6\nfirewall-cmd --permanent --new-zone\n=\nftl\nfirewall-cmd --permanent --zone\n=\nftl --add-interface\n=\nlo\nfirewall-cmd --permanent --zone\n=\nftl --add-port\n=\n4711\n/tcp\nfirewall-cmd --reload", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/main/prerequesites/#hardware", 
            "text": "Pi-hole is very lightweight, and does not require much processing power   ~52MB of free space  512MB RAM   Despite the name, you are not limited to running Pi-hole on a Raspberry Pi.\nAny hardware that runs one of the supported operating systems will do!", 
            "title": "Hardware"
        }, 
        {
            "location": "/main/prerequesites/#supported-operating-systems", 
            "text": "The following operating systems are  officially  supported:   Raspbian: Jessie / Stretch  Ubuntu: 16.04 / 16.10  Fedora: 27 / 28  Debian: 8 / 9  CentOS: 7 (not ARM)", 
            "title": "Supported Operating Systems"
        }, 
        {
            "location": "/main/prerequesites/#ip-addressing", 
            "text": "Pi-hole needs a static  IP  address to properly function (a  DHCP  reservation is just fine).  Users may run into issues because  we currently install  dhcpcd5 , which may conflict with other running network managers  such as  dhclient ,  dhcpcd ,  networkmanager , and  systemd-networkd .  As part of our install process,  we append some lines to  /etc/dhcpcd.conf  in order to statically assign an  IP  address , so take note of this prior to installing.  Please be aware of this fact because it  may cause confusion .  This is not the ideal situation for us to be in, but since a significant portion of our users are running Pi-hole on Raspbian; and because Pi-hole's roots began with the Raspberry Pi, it's a problem that is  difficult problem to get away from .  Due to the complexity of different ways of setting an  IP  address across different systems, it's a slow process and  we need help .  If you're willing to contribute, please let us know.", 
            "title": "IP Addressing"
        }, 
        {
            "location": "/main/prerequesites/#ports", 
            "text": "Service  Port  Protocol  Notes      dnsmasq  53  ( DNS )  TCP / UDP  If you happen to have another  DNS  server running, such as BIND, you will need to turn it off in order for Pi-hole to respond to  DNS  queries.    dnsmasq  67  ( DHCP )  IPv4   UDP  The  DHCP  server is an optional feature that requires additional ports.    dnsmasq  547 ( DHCPv6 )  IPv6   UDP  The  DHCP  server is an optional feature that requires additional ports.    lighttpd  80  ( HTTP )  TCP  If you have another Web server already running, such as Apache, Pi-hole's Web server will not work.  You can either disable the other Web server or change the port on which  lighttpd  listens, which allows you keep both Web servers running.    pihole- FTL  4711  TCP  FTL  is our  API  engine and uses port 4711 on the localhost interface.  This port should not be accessible from any other interface.      Info  The use of lighttpd on port  80  is optional if you decide not to install the Web dashboard during installation.\nThe use of dnsmasq on ports  67  or  547  is optional, but required if you use the  DHCP  functions of Pi-hole.", 
            "title": "Ports"
        }, 
        {
            "location": "/main/prerequesites/#firewalls", 
            "text": "Below are some examples of firewall rules that will need to be set on your Pi-hole server in order to use the functions available. These are only shown as guides, the actual commands used will be found with your distributions documentation.", 
            "title": "Firewalls"
        }, 
        {
            "location": "/main/prerequesites/#iptables", 
            "text": "IPTables uses two sets of tables. One set is for  IPv4  chains, and the second is for  IPv6  chains. If only  IPv4  blocking is used for the Pi-hole installation, only apply the rules for IP4Tables. Full Stack ( IPv4  and  IPv6 ) require both sets of rules to be applied.  Note: These examples insert the rules at the front of the chain. Please see your distributions documentation to see the exact proper command to use.  IPTables ( IPv4 )  iptables -I INPUT  1  -p tcp -m tcp --dport  80  -j ACCEPT\niptables -I INPUT  1  -p tcp -m tcp --dport  53  -j ACCEPT\niptables -I INPUT  1  -p udp -m udp --dport  53  -j ACCEPT\niptables -I INPUT  1  -p udp -m tcp --dport  67  -j ACCEPT\niptables -I INPUT  1  -p udp -m udp --dport  67  -j ACCEPT\niptables -I INPUT  1  -p tcp -m tcp --dport  4711  -i lo -j ACCEPT \nIP6Tables ( IPv6 )  ip6tables -I INPUT -p udp -m udp --sport  546 :547 --dport  546 :547 -j ACCEPT", 
            "title": "IPTables"
        }, 
        {
            "location": "/main/prerequesites/#firewalld", 
            "text": "Using the  --permanent  argument will ensure the firewall rules persist reboots. If only  IPv4  blocking is used for the Pi-hole installation, the  dhcpv6  service can be removed the the commands below. Create a new zone for the local interface ( lo ) for the pihole- FTL  ports to ensure the  API  is only accessible locally. Finally  --reload  to have the new firewall configuration take effect immediately.  firewall-cmd --permanent --add-service = http --add-service = dns --add-service = dhcp --add-service = dhcpv6\nfirewall-cmd --permanent --new-zone = ftl\nfirewall-cmd --permanent --zone = ftl --add-interface = lo\nfirewall-cmd --permanent --zone = ftl --add-port = 4711 /tcp\nfirewall-cmd --reload", 
            "title": "FirewallD"
        }, 
        {
            "location": "/main/basic-install/", 
            "text": "One-Step Automated Install\n\n\nThose who want to get started quickly and conveniently, may install Pi-hole using the following command:\n\n\ncurl -sSL https://install.pi-hole.net \n|\n bash\n\n\n\n\n\n\nInfo\n\n\nPiping to \nbash\n is a controversial topic\n, as it prevents you from \nreading code that is about to run\n on your system.\n\n\nIf you would prefer to review the code before installation, we provide these alternative installation methods.\n\n\n\n\nAlternative 1: Clone our repository and run\n\n\ngit clone --depth \n1\n https://github.com/pi-hole/pi-hole.git Pi-hole\n\ncd\n \nPi-hole/automated install/\n\nsudo bash basic-install.sh\n\n\n\n\nAlternative 2: Manually download the installer and run\n\n\nwget -O basic-install.sh https://install.pi-hole.net\nsudo bash basic-install.sh", 
            "title": "Installation"
        }, 
        {
            "location": "/main/basic-install/#one-step-automated-install", 
            "text": "Those who want to get started quickly and conveniently, may install Pi-hole using the following command:  curl -sSL https://install.pi-hole.net  |  bash   Info  Piping to  bash  is a controversial topic , as it prevents you from  reading code that is about to run  on your system.  If you would prefer to review the code before installation, we provide these alternative installation methods.", 
            "title": "One-Step Automated Install"
        }, 
        {
            "location": "/main/basic-install/#alternative-1-clone-our-repository-and-run", 
            "text": "git clone --depth  1  https://github.com/pi-hole/pi-hole.git Pi-hole cd   Pi-hole/automated install/ \nsudo bash basic-install.sh", 
            "title": "Alternative 1: Clone our repository and run"
        }, 
        {
            "location": "/main/basic-install/#alternative-2-manually-download-the-installer-and-run", 
            "text": "wget -O basic-install.sh https://install.pi-hole.net\nsudo bash basic-install.sh", 
            "title": "Alternative 2: Manually download the installer and run"
        }, 
        {
            "location": "/main/post-install/", 
            "text": "Making your network take advantage of Pi-hole\n\n\nOnce the installer has been run, you will need to \nconfigure your router to have \nDHCP\n clients use Pi-hole as their \nDNS\n server\n which ensures that all devices connecting to your network will have content blocked without any further intervention.\n\n\nIf your router does not support setting the \nDNS\n server, you can \nuse Pi-hole's built in \nDHCP\n server\n; just be sure to disable \nDHCP\n on your router first (if it has that feature available).\n\n\nAs a last resort, you can always manually set each device to use Pi-hole as their \nDNS\n server.", 
            "title": "Post-Install"
        }, 
        {
            "location": "/main/post-install/#making-your-network-take-advantage-of-pi-hole", 
            "text": "Once the installer has been run, you will need to  configure your router to have  DHCP  clients use Pi-hole as their  DNS  server  which ensures that all devices connecting to your network will have content blocked without any further intervention.  If your router does not support setting the  DNS  server, you can  use Pi-hole's built in  DHCP  server ; just be sure to disable  DHCP  on your router first (if it has that feature available).  As a last resort, you can always manually set each device to use Pi-hole as their  DNS  server.", 
            "title": "Making your network take advantage of Pi-hole"
        }, 
        {
            "location": "/main/update/", 
            "text": "Updating is as simple as running the following command:\n\n\npihole -up\n\n\nCommon issues with updating:\n\n\n[Placeholder for solutions to issues]", 
            "title": "Updating"
        }, 
        {
            "location": "/main/update/#common-issues-with-updating", 
            "text": "[Placeholder for solutions to issues]", 
            "title": "Common issues with updating:"
        }, 
        {
            "location": "/ftldns/", 
            "text": "powered by Pi-hole\u00ae\n\n\n\nFTL\nDNS\n\u2122\n (\npihole-FTL\n) offers \nDNS\n services within the Pi-hole\n\u00ae\n project.\nIt provides blazing fast \nDNS\n and \nDHCP\n services. It can also provide \nTFTP\n and more as the resolver part based on the popular \ndnsmasq\n. Furthermore, \nFTL\n offers an interactive \nAPI\n where extensive network analysis data and statistics may be queried.", 
            "title": "Overview"
        }, 
        {
            "location": "/ftldns/configfile/", 
            "text": "You can create a file \n/etc/pihole/pihole-FTL.conf\n that will be read by \nFTL\nDNS\n on startup.\n\n\nPossible settings (\nthe option shown first is the default\n):\n\n\nSOCKET_LISTENING\n\n\nSOCKET_LISTENING=localonly|all\n\n\nListen only for local socket connections or permit all connections\n\n\nQUERY_DISPLAY\n\n\nQUERY_DISPLAY=yes|no\n\n\nDisplay all queries? Set to \nno\n to hide query display\n\n\nAAAA_QUERY_ANALYSIS\n\n\nAAAA_QUERY_ANALYSIS=yes|no\n\n\nAllow \nFTL\n to analyze AAAA queries from pihole.log?\n\n\nRESOLVE_IPV6\n\n\nRESOLVE_IPV6=yes|no\n\n\nShould \nFTL\n try to resolve \nIPv6\n addresses to host names?\n\n\nRESOLVE_IPV4\n\n\nRESOLVE_IPV4=yes|no\n\n\nShould \nFTL\n try to resolve \nIPv4\n addresses to host names?\n\n\nMAXDBDAYS\n\n\nMAXDBDAYS=365\n\n\nHow long should queries be stored in the database?\nSetting this to \n0\n disables the database\n\n\nMore details\n\n\nDBINTERVAL\n\n\nDBINTERVAL=1.0\n\n\nHow often do we store queries in \nFTL\n's database [minutes]?\n\n\nMore details\n\n\nDBFILE\n\n\nDBFILE=/etc/pihole/pihole-FTL.db\n\n\nSpecify path and filename of \nFTL\n's \nSQLite3\n long-term database. Setting this to \nDBFILE=\n disables the database altogether\n\n\nMore details\n\n\nMAXLOGAGE\n\n\nMAXLOGAGE=24.0\n\n\nUp to how many hours of queries should be imported from the database and logs? Maximum is 744 (31 days)\n\n\nFTLPORT\n\n\nFTLPORT=4711\n\n\nOn which port should \nFTL\n be listening?\n\n\nPRIVACYLEVEL\n\n\nPRIVACYLEVEL=0|1|2|3\n\n\nWhich privacy level is used?\n\n\nMore details\n\n\nIGNORE_LOCALHOST\n\n\nIGNORE_LOCALHOST=no|yes\n\n\nShould \nFTL\n ignore queries coming from the local machine?\n\n\nBLOCKINGMODE\n\n\nBLOCKINGMODE=NULL|IP-AAAA-NODATA|IP|NXDOMAIN\n\n\nHow should \nFTL\n reply to blocked queries?\n\n\nMore details\n\n\nREGEX_DEBUGMODE\n\n\nREGEX_DEBUGMODE=false|true\n\n\n\n\nControls if \nFTL\nDNS\n should print extended details about \nregex\n matching into \npihole-FTL.log\n.\n\n\nMore details", 
            "title": "Configuration"
        }, 
        {
            "location": "/ftldns/configfile/#socket_listening", 
            "text": "SOCKET_LISTENING=localonly|all  Listen only for local socket connections or permit all connections", 
            "title": "SOCKET_LISTENING"
        }, 
        {
            "location": "/ftldns/configfile/#query_display", 
            "text": "QUERY_DISPLAY=yes|no  Display all queries? Set to  no  to hide query display", 
            "title": "QUERY_DISPLAY"
        }, 
        {
            "location": "/ftldns/configfile/#aaaa_query_analysis", 
            "text": "AAAA_QUERY_ANALYSIS=yes|no  Allow  FTL  to analyze AAAA queries from pihole.log?", 
            "title": "AAAA_QUERY_ANALYSIS"
        }, 
        {
            "location": "/ftldns/configfile/#resolve_ipv6", 
            "text": "RESOLVE_IPV6=yes|no  Should  FTL  try to resolve  IPv6  addresses to host names?", 
            "title": "RESOLVE_IPV6"
        }, 
        {
            "location": "/ftldns/configfile/#resolve_ipv4", 
            "text": "RESOLVE_IPV4=yes|no  Should  FTL  try to resolve  IPv4  addresses to host names?", 
            "title": "RESOLVE_IPV4"
        }, 
        {
            "location": "/ftldns/configfile/#maxdbdays", 
            "text": "MAXDBDAYS=365  How long should queries be stored in the database?\nSetting this to  0  disables the database  More details", 
            "title": "MAXDBDAYS"
        }, 
        {
            "location": "/ftldns/configfile/#dbinterval", 
            "text": "DBINTERVAL=1.0  How often do we store queries in  FTL 's database [minutes]?  More details", 
            "title": "DBINTERVAL"
        }, 
        {
            "location": "/ftldns/configfile/#dbfile", 
            "text": "DBFILE=/etc/pihole/pihole-FTL.db  Specify path and filename of  FTL 's  SQLite3  long-term database. Setting this to  DBFILE=  disables the database altogether  More details", 
            "title": "DBFILE"
        }, 
        {
            "location": "/ftldns/configfile/#maxlogage", 
            "text": "MAXLOGAGE=24.0  Up to how many hours of queries should be imported from the database and logs? Maximum is 744 (31 days)", 
            "title": "MAXLOGAGE"
        }, 
        {
            "location": "/ftldns/configfile/#ftlport", 
            "text": "FTLPORT=4711  On which port should  FTL  be listening?", 
            "title": "FTLPORT"
        }, 
        {
            "location": "/ftldns/configfile/#privacylevel", 
            "text": "PRIVACYLEVEL=0|1|2|3  Which privacy level is used?  More details", 
            "title": "PRIVACYLEVEL"
        }, 
        {
            "location": "/ftldns/configfile/#ignore_localhost", 
            "text": "IGNORE_LOCALHOST=no|yes  Should  FTL  ignore queries coming from the local machine?", 
            "title": "IGNORE_LOCALHOST"
        }, 
        {
            "location": "/ftldns/configfile/#blockingmode", 
            "text": "BLOCKINGMODE=NULL|IP-AAAA-NODATA|IP|NXDOMAIN  How should  FTL  reply to blocked queries?  More details", 
            "title": "BLOCKINGMODE"
        }, 
        {
            "location": "/ftldns/configfile/#regex_debugmode", 
            "text": "REGEX_DEBUGMODE=false|true  Controls if  FTL DNS  should print extended details about  regex  matching into  pihole-FTL.log .  More details", 
            "title": "REGEX_DEBUGMODE"
        }, 
        {
            "location": "/ftldns/dns-resolver/", 
            "text": "FTL\nDNS\n comes with a lightweight but powerful inbuilt \nDNS\n/\nDHCP\n/\nTFTP\n/... server eliminating the need to install \ndnsmasq\n separately (we used to do this before Pi-hole v4.0). However, it is important to understand that we are not moving away from \ndnsmasq\n, but, in contrast, are coupling even closer to it by incorporating it into \nFTL\n. This provides us with a much more reliable monolith \nDNS\n solution where we can be sure that the versions of \nFTL\n and the \nDNS\n internals are always 100% compatible with each other.\n\n\nAs we maintain our own fork of \ndnsmasq\n we have been able to apply some \nminimal\n changes to the source code which might bring substantial benefits for our users. However, although the potential for changes is endless, we want to include as few modifications as possible. As a purely volunteer driven project, you will surely understand that it was already a major undertaking to get \nFTL\nDNS\n set up and running. It was much more than just copy-pasting \ndnsmasq\n into place.\n\n\nWe have always been very explicit about how we will react to feature requests that target the resolver part (from the initial \nFTL\nDNS\n beta test announcement):\n\n\n\n\nThink of \nFTL\nDNS\n as \ndnsmasq\n with Pi-hole\u2019s special sauce. This allows us to easily merge any upstream changes that get added, while still allowing us to continue to develop Pi-hole as we have been.\n\n\n\n\nIf we would start to modify the resolver code in too many places, then this would probably make us deviate too much from \ndnsmasq\n's code base and we couldn't apply patches easily preventing us from being able to ship important security updates.\n\n\nImplemented modifications in \ndnsmasq\n's source code\n\n\nFTL\n hooks\n\n\nWe place hooks in a lot of places in the resolver that branch out into \nFTL\n code to process queries and responses. By this, we keep the resolver code itself clean.\n\n\nRemove limit on maximum cache size\n\n\nUsers are able to configure the size of the resolvers name cache. The default is 150 names. Setting the cache size to zero disables caching. We think users should be allowed to set the cache size to any value they find appropriate. However, \ndnsmasq\n's source code contains a condition that limits the maximum size of the cache to 10,000 names. We removed this hard-coded upper limit in \noption.c\n and submitted a patch to remove this hard-coded limit in the upstream version of \ndnsmasq\n.\n\n\nImprove detection algorithm for determining the \"best\" forward destination\n\n\nThe \nDNS\n forward destination determination algorithm in \nFTL\nDNS\n's is modified to be much less restrictive than the original algorithm in \ndnsmasq\n. We keep using the fastest responding server now for 1000 queries or 10 minutes (whatever happens earlier) instead of 50 queries or 10 seconds (default values in \ndnsmasq\n).\nWe keep the exceptions, i.e., we try all possible forward destinations if \nSERVFAIL\n or \nREFUSED\n is received or if a timeout occurs.\nOverall, this change has proven to greatly reduce the number of actually performed queries in typical Pi-hole environments. It may even be understood as being preferential in terms of privacy (as we send queries much less often to all servers).\nThis has been implemented in commit \nd1c163e\n on the \nFTLDNS\n branch.", 
            "title": "DNS resolver"
        }, 
        {
            "location": "/ftldns/dns-resolver/#implemented-modifications-in-dnsmasqs-source-code", 
            "text": "", 
            "title": "Implemented modifications in dnsmasq's source code"
        }, 
        {
            "location": "/ftldns/dns-resolver/#ftl-hooks", 
            "text": "We place hooks in a lot of places in the resolver that branch out into  FTL  code to process queries and responses. By this, we keep the resolver code itself clean.", 
            "title": "FTL hooks"
        }, 
        {
            "location": "/ftldns/dns-resolver/#remove-limit-on-maximum-cache-size", 
            "text": "Users are able to configure the size of the resolvers name cache. The default is 150 names. Setting the cache size to zero disables caching. We think users should be allowed to set the cache size to any value they find appropriate. However,  dnsmasq 's source code contains a condition that limits the maximum size of the cache to 10,000 names. We removed this hard-coded upper limit in  option.c  and submitted a patch to remove this hard-coded limit in the upstream version of  dnsmasq .", 
            "title": "Remove limit on maximum cache size"
        }, 
        {
            "location": "/ftldns/dns-resolver/#improve-detection-algorithm-for-determining-the-best-forward-destination", 
            "text": "The  DNS  forward destination determination algorithm in  FTL DNS 's is modified to be much less restrictive than the original algorithm in  dnsmasq . We keep using the fastest responding server now for 1000 queries or 10 minutes (whatever happens earlier) instead of 50 queries or 10 seconds (default values in  dnsmasq ).\nWe keep the exceptions, i.e., we try all possible forward destinations if  SERVFAIL  or  REFUSED  is received or if a timeout occurs.\nOverall, this change has proven to greatly reduce the number of actually performed queries in typical Pi-hole environments. It may even be understood as being preferential in terms of privacy (as we send queries much less often to all servers).\nThis has been implemented in commit  d1c163e  on the  FTLDNS  branch.", 
            "title": "Improve detection algorithm for determining the \"best\" forward destination"
        }, 
        {
            "location": "/ftldns/blockingmode/", 
            "text": "Pi-hole \nFTL\nDNS\n supports two different methods for blocking queries. Both have their advantages and drawbacks. They are summarized on this page. The blocking mode can be configured in \n/etc/pihole/pihole-FTL.conf\n.\n\n\nThis setting can be updated by sending \nSIGHUP\n to \npihole-FTL\n (\nsudo killall -SIGHUP pihole-FTL\n).\n\n\nPi-hole's unspecified \nIP\n blocking (default)\n\n\n/etc/pihole/pihole-FTL.conf\n setting:\n\nBLOCKINGMODE=NULL\n\n\n\nBlocked queries will be answered with the unspecified address\n\n;; QUESTION SECTION:\n;doubleclick.net.               IN      ANY\n\n;; ANSWER SECTION:\ndoubleclick.net.        2       IN      A       0.0.0.0\ndoubleclick.net.        2       IN      AAAA    ::\n\n\n\nFollowing \nRFC 3513, Internet Protocol Version 6 (\nIPv6\n) Addressing Architecture, section 2.5.2\n, the address \n0:0:0:0:0:0:0:0\n (or \n::\n for short) is the unspecified address. It must never be assigned to any node and indicates the absence of an address. Following \nRFC1122, section 3.2\n, the address \n0.0.0.0\n can be understood as the \nIPv4\n equivalent of \n::\n.\n\n\nAdvantages\n\n\n\n\nThe client does not even try to establish a connection for the requested website\n\n\nSpeedup and less traffic\n\n\nSolves potential \nHTTPS\n timeouts as requests are never performed\n\n\nNo need to run a webserver on your Pi-hole (reduces complexity when running other web services on the same machine)\n\n\n\n\nDisadvantage\n\n\n\n\nBlocking page cannot be shown and whitelisting has to be performed from the dashboard or \nCLI\n\n\n\n\nPi-hole's \nIP\n (\nIPv6\n NODATA) blocking\n\n\n/etc/pihole/pihole-FTL.conf\n setting:\n\nBLOCKINGMODE=IP-NODATA-AAAA\n\n\n\nBlocked queries will be answered with the local \nIPv4\n addresses of your Pi-hole (as configured in your \nsetupVars.conf\n file). Blocked AAAA queries will answered with \nNODATA-IPV6\n and clients will only try to reach your Pi-hole over its static \nIPv4\n address\n\n;; QUESTION SECTION:\n;doubleclick.net.               IN      ANY\n\n;; ANSWER SECTION:\ndoubleclick.net.        2       IN      A       192.168.2.11\n\n\n\nAdvantage\n\n\n\n\nShows blocking page from which blocked domains can be whitelisted\n\n\nServes \nIPv4\n-only replies and hence mitigates issues with rotating \nIPv6\n prefixes\n\n\n\n\nDisadvantages\n\n\n\n\nRequires a webserver to run on your Pi-hole\n\n\nMay cause time-outs for \nHTTPS\n content even with properly configured firewall rules\n\n\n\n\nPi-hole's full \nIP\n blocking\n\n\n/etc/pihole/pihole-FTL.conf\n setting:\n\nBLOCKINGMODE=IP\n\n\n\nBlocked queries will be answered with the local \nIP\n addresses of your Pi-hole (as configured in your \nsetupVars.conf\n file)\n\n;; QUESTION SECTION:\n;doubleclick.net.               IN      ANY\n\n;; ANSWER SECTION:\ndoubleclick.net.        2       IN      A       192.168.2.11\ndoubleclick.net.        2       IN      AAAA    fda2:2001:4756:0:ab27:beff:ef37:4242\n\n\n\nAdvantage\n\n\n\n\nShows blocking page from which blocked domains can be whitelisted\n\n\n\n\nDisadvantages\n\n\n\n\nRequires a webserver to run on your Pi-hole\n\n\nMay cause time-outs for \nHTTPS\n content even with properly configured firewall rules\n\n\nMay cause problems with alternating prefixes on \nIPv6\n addresses (see \nIP-AAAA-NODATA\n)\n\n\n\n\nPi-hole's NXDOMAIN blocking\n\n\n/etc/pihole/pihole-FTL.conf\n setting:\n\nBLOCKINGMODE=NXDOMAIN\n\n\nBlocked queries will be answered with an empty response (no answer section) and status \nNXDOMAIN\n (\nno such domain\n)\n\n;; QUESTION SECTION:\n;doubleclick.net.               IN      ANY\n\n\n\nAdvantages \n Disadvantages\n\n\nSimilar to \nNULL\n blocking, but experiments suggest that clients may try to resolve blocked domains more often compared to \nNULL\n blocking.", 
            "title": "Blocking mode"
        }, 
        {
            "location": "/ftldns/blockingmode/#pi-holes-unspecified-ip-blocking-default", 
            "text": "/etc/pihole/pihole-FTL.conf  setting: BLOCKINGMODE=NULL  Blocked queries will be answered with the unspecified address ;; QUESTION SECTION:\n;doubleclick.net.               IN      ANY\n\n;; ANSWER SECTION:\ndoubleclick.net.        2       IN      A       0.0.0.0\ndoubleclick.net.        2       IN      AAAA    ::  Following  RFC 3513, Internet Protocol Version 6 ( IPv6 ) Addressing Architecture, section 2.5.2 , the address  0:0:0:0:0:0:0:0  (or  ::  for short) is the unspecified address. It must never be assigned to any node and indicates the absence of an address. Following  RFC1122, section 3.2 , the address  0.0.0.0  can be understood as the  IPv4  equivalent of  :: .", 
            "title": "Pi-hole's unspecified IP blocking (default)"
        }, 
        {
            "location": "/ftldns/blockingmode/#advantages", 
            "text": "The client does not even try to establish a connection for the requested website  Speedup and less traffic  Solves potential  HTTPS  timeouts as requests are never performed  No need to run a webserver on your Pi-hole (reduces complexity when running other web services on the same machine)", 
            "title": "Advantages"
        }, 
        {
            "location": "/ftldns/blockingmode/#disadvantage", 
            "text": "Blocking page cannot be shown and whitelisting has to be performed from the dashboard or  CLI", 
            "title": "Disadvantage"
        }, 
        {
            "location": "/ftldns/blockingmode/#pi-holes-ip-ipv6-nodata-blocking", 
            "text": "/etc/pihole/pihole-FTL.conf  setting: BLOCKINGMODE=IP-NODATA-AAAA  Blocked queries will be answered with the local  IPv4  addresses of your Pi-hole (as configured in your  setupVars.conf  file). Blocked AAAA queries will answered with  NODATA-IPV6  and clients will only try to reach your Pi-hole over its static  IPv4  address ;; QUESTION SECTION:\n;doubleclick.net.               IN      ANY\n\n;; ANSWER SECTION:\ndoubleclick.net.        2       IN      A       192.168.2.11", 
            "title": "Pi-hole's IP (IPv6 NODATA) blocking"
        }, 
        {
            "location": "/ftldns/blockingmode/#advantage", 
            "text": "Shows blocking page from which blocked domains can be whitelisted  Serves  IPv4 -only replies and hence mitigates issues with rotating  IPv6  prefixes", 
            "title": "Advantage"
        }, 
        {
            "location": "/ftldns/blockingmode/#disadvantages", 
            "text": "Requires a webserver to run on your Pi-hole  May cause time-outs for  HTTPS  content even with properly configured firewall rules", 
            "title": "Disadvantages"
        }, 
        {
            "location": "/ftldns/blockingmode/#pi-holes-full-ip-blocking", 
            "text": "/etc/pihole/pihole-FTL.conf  setting: BLOCKINGMODE=IP  Blocked queries will be answered with the local  IP  addresses of your Pi-hole (as configured in your  setupVars.conf  file) ;; QUESTION SECTION:\n;doubleclick.net.               IN      ANY\n\n;; ANSWER SECTION:\ndoubleclick.net.        2       IN      A       192.168.2.11\ndoubleclick.net.        2       IN      AAAA    fda2:2001:4756:0:ab27:beff:ef37:4242", 
            "title": "Pi-hole's full IP blocking"
        }, 
        {
            "location": "/ftldns/blockingmode/#advantage_1", 
            "text": "Shows blocking page from which blocked domains can be whitelisted", 
            "title": "Advantage"
        }, 
        {
            "location": "/ftldns/blockingmode/#disadvantages_1", 
            "text": "Requires a webserver to run on your Pi-hole  May cause time-outs for  HTTPS  content even with properly configured firewall rules  May cause problems with alternating prefixes on  IPv6  addresses (see  IP-AAAA-NODATA )", 
            "title": "Disadvantages"
        }, 
        {
            "location": "/ftldns/blockingmode/#pi-holes-nxdomain-blocking", 
            "text": "/etc/pihole/pihole-FTL.conf  setting: BLOCKINGMODE=NXDOMAIN \nBlocked queries will be answered with an empty response (no answer section) and status  NXDOMAIN  ( no such domain ) ;; QUESTION SECTION:\n;doubleclick.net.               IN      ANY", 
            "title": "Pi-hole's NXDOMAIN blocking"
        }, 
        {
            "location": "/ftldns/blockingmode/#advantages-disadvantages", 
            "text": "Similar to  NULL  blocking, but experiments suggest that clients may try to resolve blocked domains more often compared to  NULL  blocking.", 
            "title": "Advantages &amp; Disadvantages"
        }, 
        {
            "location": "/ftldns/regex/overview/", 
            "text": "A regular expression, or \nRegEx\n for short, is a pattern that can be used for building arbitrarily complex blocking rules in \nFTL\nDNS\n.\nWe implement the \nPOSIX\n Extended Regular Expressions similar to the one used by the UNIX \negrep\n (or \ngrep -E\n) command.\n\n\nOur implementation is light and fast as each domain is only checked once for a match (if you query \ngoogle.com\n, it will be checked against your \nRegEx\n. Any subsequent query to the same domain will not be checked again until you restart \npihole-FTL\n).\n\n\nHow to use regular expressions for blocking\n\n\nFTL\nDNS\n reads in regular expression filters from \n/etc/pihole/regex.list\n (one expression per line, lines starting with \n#\n will be skipped).\nTo tell \nFTL\nDNS\n to reload the list, either:\n\n\n\n\nExecute the \nrecompile-regex\n \nAPI\n command (\necho \"\nrecompile-regex\" | nc localhost 4711\n) or\n\n\nSend \nSIGHUP\n to \npihole-FTL\n (\nsudo killall -SIGHUP pihole-FTL\n) or\n\n\nRestart the service (\nsudo service pihole-FTL restart\n)\n\n\n\n\nPi-hole \nRegex\n debugging mode\n\n\nTo ease the usage of regular expression filters in \nFTL\nDNS\n, we offer a \nregex\n debugging mode. Set\n\nREGEX_DEBUGMODE=true\n\n\nin your \n/etc/pihole/pihole-FTL.conf\n and restart \npihole-FTL\n to enable or disable this mode.\n\n\nOnce the debugging mode is enabled, each match will be logged to \n/var/log/pihole-FTL.log\n in the following format:\n\n[2018-07-17 17:40:51.304] DEBUG: Regex in line 2 \n((^)|(\\.))twitter\\.\n matches \nwhatever.twitter.com\n\n\n\nThe given line number corresponds to the line in the file \n/etc/pihole/regex.list\n.\n\n\nNote that validation is only done on the first occurrence of a domain to increase the computational efficiency of \nFTL\nDNS\n.", 
            "title": "Overview"
        }, 
        {
            "location": "/ftldns/regex/overview/#how-to-use-regular-expressions-for-blocking", 
            "text": "FTL DNS  reads in regular expression filters from  /etc/pihole/regex.list  (one expression per line, lines starting with  #  will be skipped).\nTo tell  FTL DNS  to reload the list, either:   Execute the  recompile-regex   API  command ( echo \" recompile-regex\" | nc localhost 4711 ) or  Send  SIGHUP  to  pihole-FTL  ( sudo killall -SIGHUP pihole-FTL ) or  Restart the service ( sudo service pihole-FTL restart )", 
            "title": "How to use regular expressions for blocking"
        }, 
        {
            "location": "/ftldns/regex/overview/#pi-hole-regex-debugging-mode", 
            "text": "To ease the usage of regular expression filters in  FTL DNS , we offer a  regex  debugging mode. Set REGEX_DEBUGMODE=true \nin your  /etc/pihole/pihole-FTL.conf  and restart  pihole-FTL  to enable or disable this mode.  Once the debugging mode is enabled, each match will be logged to  /var/log/pihole-FTL.log  in the following format: [2018-07-17 17:40:51.304] DEBUG: Regex in line 2  ((^)|(\\.))twitter\\.  matches  whatever.twitter.com  \nThe given line number corresponds to the line in the file  /etc/pihole/regex.list .  Note that validation is only done on the first occurrence of a domain to increase the computational efficiency of  FTL DNS .", 
            "title": "Pi-hole Regex debugging mode"
        }, 
        {
            "location": "/ftldns/regex/tutorial/", 
            "text": "Pi-hole regular expressions tutorial\n\n\nWe provide a short but thorough introduction to our regular expressions implementation. This may come in handy if you are designing blocking rules (see also our cheat sheet below!). In our implementation, all characters match themselves except for the following special characters: \n.[{}()\\*+?|^$\n. If you want to match those, you need to escape them like \n\\.\n for a literal period, but no rule without exception (see character groups below for further details).\n\n\nAnchors (\n^\n and \n$\n)\n\n\nFirst of all, we look at anchors which can be used to indicate the start or the end of a domain, respectively. If you don't specify anchors, the match may be partial (see examples below).\n\n\n\n\n\n\n\n\nExample\n\n\nInterpretation\n\n\n\n\n\n\n\n\n\n\ndomain\n\n\npartial match\n. Without anchors, a text may appear anywhere in the domain. This matches \nsome.domain.com\n, \ndomain.com\n and \nverylongdomain.com\n and more\n\n\n\n\n\n\n^localhost$\n\n\nexact match\n matching \nonly\n \nlocalhost\n but neither \na.localhost\n nor \nlocalhost.com\n\n\n\n\n\n\n^abc\n\n\nmatches any domain \nstarting\n (\n^\n) in \"abc\" like \nabcdomain.com\n, \nabc.domain.com\n but not \ndef.abc.com\n\n\n\n\n\n\ncom$\n\n\nmatches any domain \nending\n (\n$\n) in \"com\" such as \ndomain.com\n but not \ndomain.com.co.uk\n\n\n\n\n\n\n\n\nWildcard (\n.\n)\n\n\nAn unescaped period stands for any \nsingle\n character.\n\n\n\n\n\n\n\n\nExample\n\n\nInterpretation\n\n\n\n\n\n\n\n\n\n\n^domain.$\n\n\nmatches \ndomaina\n, \ndomainb\n, \ndomainc\n, but not \ndomain\n\n\n\n\n\n\n\n\nBounds and multipliers (\n{}\n, \n*\n, \n+\n, and \n?\n)\n\n\nWith bounds, one can denote the number of times something has to occur:\n\n\n\n\n\n\n\n\nBound\n\n\nMeaning\n\n\n\n\n\n\n\n\n\n\nab{4}\n\n\nmatches a domain that contains a single \na\n followed by four \nb\n (matching only \nabbbb\n)\n\n\n\n\n\n\nab{4,}\n\n\nmatches a domain that contains a single \na\n followed by \nat least\n four \nb\n (matching also \nabbbbbbbb\n)\n\n\n\n\n\n\nab{3,5}\n\n\nmatches a domain that contains a single \na\n followed by three to five \nb\n (matching only \nabbb\n, \nabbbb\n, and \nabbbbb\n)\n\n\n\n\n\n\n\n\nMultipliers are shortcuts for some of the bounds that are needed most often:\n\n\n\n\n\n\n\n\nMultipliers\n\n\nBounds equivalent\n\n\nMeaning\n\n\n\n\n\n\n\n\n\n\n?\n\n\n{0,1}\n\n\nnever or once (optional)\n\n\n\n\n\n\n*\n\n\n{0,}\n\n\nnever or more (optional)\n\n\n\n\n\n\n+\n\n\n{1,}\n\n\nonce or more (mandatory)\n\n\n\n\n\n\n\n\nTo illustrate the usefulness of multipliers (and bounds), we provide a few examples:\n\n\n\n\n\n\n\n\nExample\n\n\nInterpretation\n\n\n\n\n\n\n\n\n\n\n^r-*\\.movie\n\n\nmatches a domain like \nr------movie.com\n where the number of dashes can be arbitrary (also none)\n\n\n\n\n\n\n^r-?\\.movie\n\n\nmatches only the domains \nrmovie.com\n and \nr-movie.com\n but not those with more than one dash\n\n\n\n\n\n\n^r-+\\.movie\n\n\nmatches only the domains with at least one dash, i.e., not \nrmovie.com\n\n\n\n\n\n\n^a?b+\n\n\nmatches domains like \nabbbb.com\n (zero or one \na\n at the beginning followed by one or more \nb\n)\n\n\n\n\n\n\n\n\nCharacter groups (\n[]\n)\n\n\nWith character groups, a set of characters can be matched:\n\n\n\n\n\n\n\n\nCharacter group\n\n\nInterpretation\n\n\n\n\n\n\n\n\n\n\n[abc]\n\n\nmatches \na\n, \nb\n, or \nc\n (using explicitly specified characters)\n\n\n\n\n\n\n[a-c]\n\n\nmatches \na\n, \nb\n, or \nc\n (using a \nrange\n)\n\n\n\n\n\n\n[a-c]+\n\n\nmatches any non-zero number of \na\n, \nb\n, \nc\n\n\n\n\n\n\n[a-z]\n\n\nmatches any single lowercase letter\n\n\n\n\n\n\n[a-zA-Z]\n\n\nmatches any single letter\n\n\n\n\n\n\n[a-z0-9]\n\n\nmatches any single lowercase letter or any single digit\n\n\n\n\n\n\n[^a-z]\n\n\nNegation\n matching any single character \nexcept\n lowercase letters\n\n\n\n\n\n\nabc[0-9]+\n\n\nmatches the string \nabc\n followed by a number of arbitrary length\n\n\n\n\n\n\n\n\nBracket expressions are an exception to the character escape rule. Inside them, all special characters, including the backslash (\n\\\n), lose their special powers, i.e. they match themselves exactly. Furthermore, to include a literal \n]\n in the list, make it the first character (like \n[]]\n or \n[^]]\n if negated). To include a literal \n-\n, make it the first or last character, or the second endpoint of a range (e.g. \n[a-z-]\n to match \na\n to \nz\n and \n-\n).\n\n\nGroups (\n()\n)\n\n\nUsing groups, we can enclose regular expressions, they are most powerful when combined with bounds or multipliers (see also alternations below).\n\n\n\n\n\n\n\n\nExample\n\n\nInterpretation\n\n\n\n\n\n\n\n\n\n\n(abc)\n\n\nmatches \nabc\n (trivial example)\n\n\n\n\n\n\n(abc)*\n\n\nmatches zero or more copies of \nabc\n like \nabcabc\n but not \nabcdefabc\n\n\n\n\n\n\n(abc){1,3}\n\n\nmatches one, two or three copies of \nabc\n: \nabc\n, \nabcabc\n, \nabcabcabc\n but nothing else\n\n\n\n\n\n\n\n\nAlternations (\n|\n)\n\n\nAlternations can be used as an \"or\" operator in regular expressions.\n\n\n\n\n\n\n\n\nExample\n\n\nInterpretation\n\n\n\n\n\n\n\n\n\n\n(abc)|(def)\n\n\nmatches \nabc\n \nand\n \ndef\n\n\n\n\n\n\ndomain(a|b)\\.com\n\n\nmatches \ndomaina.com\n and \ndomainb.com\n but not \ndomain.com\n or \ndomainx.com\n\n\n\n\n\n\ndomain(a|b)*\\.com\n\n\nmatches \ndomain.com\n, \ndomainaaaa.com\n \ndomainbbb.com\n but not \ndomainab.com\n (any number of \na\n or \nb\n in between \ndomain\n and \n.com\n)\n\n\n\n\n\n\n\n\nCharacter classes (\n[:class:]\n)\n\n\nIn addition to character groups, there are also some special character classes available, such as\n\n\n\n\n\n\n\n\nCharacter class\n\n\nGroup equivalent\n\n\nInterpretation\n\n\n\n\n\n\n\n\n\n\n[:digit:]\n\n\n[0-9]\n\n\nmatches digits\n\n\n\n\n\n\n[:lower:]\n\n\n[a-z]\n\n\nmatched lowercase letters\n\n\n\n\n\n\n[:upper:]\n\n\n[A-Z]\n\n\nmatched uppercase letters\n\n\n\n\n\n\n[:alpha:]\n\n\n[A-Za-z]\n\n\nmatches alphabetic characters\n\n\n\n\n\n\n[:alnum:]\n\n\n[A-Za-z0-9]\n\n\nmatches alphabetic characters and digits\n\n\n\n\n\n\n\n\nAdvanced examples\n\n\nAfter going through our quick tutorial, we provide some more advances examples so you can test your knowledge.\n\n\nBlock domain with only numbers\n\n\n^[0-9][^a-z]+\\.((com)|(edu))$\n\n\nBlocks domains containing only numbers (no letters) and ending in \n.com\n or \n.edu\n. Blocks \n555661.com\n, and \n456.edu\n, but not \n555g555.com\n\n\nBlock domains without subdomains\n\n\n^[a-z0-9]+([\\-]{1}[a-z0-9]+)*\\.[a-z]{2,7}$\n\n\nA domain name shall not start or end with a dash but can contain any number of them. It must be followed by a \nTLD\n (we assume a valid \nTLD\n length of two to seven characters)\n\n\nCheatsheet\n\n\n\n\n\n\n\n\nExpression\n\n\nMeaning\n\n\nExample\n\n\n\n\n\n\n\n\n\n\n^\n\n\nBeginning of string\n\n\n^client\n matches strings that begin with \nclient\n, such as \nclient.server.com\n but not \nmore.client.server.com\n (exception: within a character range (\n[]\n) \n^\n means negation)\n\n\n\n\n\n\n$\n\n\nEnd of string\n\n\ning$\n matches \nexciting\n but not \ningenious\n\n\n\n\n\n\n*\n\n\nMatch zero or more of the previous\n\n\nah*\n matches \nahhhhh\n or \na\n\n\n\n\n\n\n?\n\n\nMatch zero or one of the previous\n\n\nah?\n matches \na\n or \nah\n\n\n\n\n\n\n+\n\n\nMatch one or more of the previous\n\n\nah+\n matches \nah\n or \nahhh\n but not \na\n\n\n\n\n\n\n.\n\n\nWildcard character, matches any character\n\n\ndo.*\n matches \ndo\n, \ndog\n, \ndoor\n, \ndot\n, etc.;\ndo.+\n matches \ndog\n, \ndoor\n, \ndot\n, etc. but not \ndo\n (wildcard with \n+\n requires at least one extra character for matching)\n\n\n\n\n\n\n( )\n\n\nGroup\n\n\nEnclose regular expressions, see the example for \n|\n\n\n\n\n\n\n|\n\n\nAlternation\n\n\n(mon|tues)day\n matches \nmonday\n or \ntuesday\n but not \nfriday\n or \nmondiag\n\n\n\n\n\n\n[ ]\n\n\nMatches a range of characters\n\n\n[cbf]ar\n matches \ncar\n, \nbar\n, or \nfar\n;\n\n\n\n\n\n\n[^]\n\n\nNegation\n\n\n[^0-9]\n matches any character \nexcept\n \n0\n to \n9\n\n\n\n\n\n\n{ }\n\n\nMatches a specified number of occurrences of the previous\n\n\n[0-9]{3}\n matches any three-digit number like \n315\n but not \n31\n;\n[0-9]{2,4}\n matches two- to four-digit numbers like \n12\n, \n123\n, and \n1234\n but not \n1\n or \n12345\n;\n[0-9]{2,}\n matches any number with two or more digits like \n1234567\n, \n123456789\n, but not \n1\n\n\n\n\n\n\n\\\n\n\nUsed to escape a special character not inside \n[]\n\n\ngoogle\\.com\n matches \ngoogle.com", 
            "title": "Tutorial"
        }, 
        {
            "location": "/ftldns/regex/tutorial/#pi-hole-regular-expressions-tutorial", 
            "text": "We provide a short but thorough introduction to our regular expressions implementation. This may come in handy if you are designing blocking rules (see also our cheat sheet below!). In our implementation, all characters match themselves except for the following special characters:  .[{}()\\*+?|^$ . If you want to match those, you need to escape them like  \\.  for a literal period, but no rule without exception (see character groups below for further details).", 
            "title": "Pi-hole regular expressions tutorial"
        }, 
        {
            "location": "/ftldns/regex/tutorial/#anchors-and", 
            "text": "First of all, we look at anchors which can be used to indicate the start or the end of a domain, respectively. If you don't specify anchors, the match may be partial (see examples below).     Example  Interpretation      domain  partial match . Without anchors, a text may appear anywhere in the domain. This matches  some.domain.com ,  domain.com  and  verylongdomain.com  and more    ^localhost$  exact match  matching  only   localhost  but neither  a.localhost  nor  localhost.com    ^abc  matches any domain  starting  ( ^ ) in \"abc\" like  abcdomain.com ,  abc.domain.com  but not  def.abc.com    com$  matches any domain  ending  ( $ ) in \"com\" such as  domain.com  but not  domain.com.co.uk", 
            "title": "Anchors (^ and $)"
        }, 
        {
            "location": "/ftldns/regex/tutorial/#wildcard", 
            "text": "An unescaped period stands for any  single  character.     Example  Interpretation      ^domain.$  matches  domaina ,  domainb ,  domainc , but not  domain", 
            "title": "Wildcard (.)"
        }, 
        {
            "location": "/ftldns/regex/tutorial/#bounds-and-multipliers-and", 
            "text": "With bounds, one can denote the number of times something has to occur:     Bound  Meaning      ab{4}  matches a domain that contains a single  a  followed by four  b  (matching only  abbbb )    ab{4,}  matches a domain that contains a single  a  followed by  at least  four  b  (matching also  abbbbbbbb )    ab{3,5}  matches a domain that contains a single  a  followed by three to five  b  (matching only  abbb ,  abbbb , and  abbbbb )     Multipliers are shortcuts for some of the bounds that are needed most often:     Multipliers  Bounds equivalent  Meaning      ?  {0,1}  never or once (optional)    *  {0,}  never or more (optional)    +  {1,}  once or more (mandatory)     To illustrate the usefulness of multipliers (and bounds), we provide a few examples:     Example  Interpretation      ^r-*\\.movie  matches a domain like  r------movie.com  where the number of dashes can be arbitrary (also none)    ^r-?\\.movie  matches only the domains  rmovie.com  and  r-movie.com  but not those with more than one dash    ^r-+\\.movie  matches only the domains with at least one dash, i.e., not  rmovie.com    ^a?b+  matches domains like  abbbb.com  (zero or one  a  at the beginning followed by one or more  b )", 
            "title": "Bounds and multipliers ({}, *, +, and ?)"
        }, 
        {
            "location": "/ftldns/regex/tutorial/#character-groups", 
            "text": "With character groups, a set of characters can be matched:     Character group  Interpretation      [abc]  matches  a ,  b , or  c  (using explicitly specified characters)    [a-c]  matches  a ,  b , or  c  (using a  range )    [a-c]+  matches any non-zero number of  a ,  b ,  c    [a-z]  matches any single lowercase letter    [a-zA-Z]  matches any single letter    [a-z0-9]  matches any single lowercase letter or any single digit    [^a-z]  Negation  matching any single character  except  lowercase letters    abc[0-9]+  matches the string  abc  followed by a number of arbitrary length     Bracket expressions are an exception to the character escape rule. Inside them, all special characters, including the backslash ( \\ ), lose their special powers, i.e. they match themselves exactly. Furthermore, to include a literal  ]  in the list, make it the first character (like  []]  or  [^]]  if negated). To include a literal  - , make it the first or last character, or the second endpoint of a range (e.g.  [a-z-]  to match  a  to  z  and  - ).", 
            "title": "Character groups ([])"
        }, 
        {
            "location": "/ftldns/regex/tutorial/#groups", 
            "text": "Using groups, we can enclose regular expressions, they are most powerful when combined with bounds or multipliers (see also alternations below).     Example  Interpretation      (abc)  matches  abc  (trivial example)    (abc)*  matches zero or more copies of  abc  like  abcabc  but not  abcdefabc    (abc){1,3}  matches one, two or three copies of  abc :  abc ,  abcabc ,  abcabcabc  but nothing else", 
            "title": "Groups (())"
        }, 
        {
            "location": "/ftldns/regex/tutorial/#alternations", 
            "text": "Alternations can be used as an \"or\" operator in regular expressions.     Example  Interpretation      (abc)|(def)  matches  abc   and   def    domain(a|b)\\.com  matches  domaina.com  and  domainb.com  but not  domain.com  or  domainx.com    domain(a|b)*\\.com  matches  domain.com ,  domainaaaa.com   domainbbb.com  but not  domainab.com  (any number of  a  or  b  in between  domain  and  .com )", 
            "title": "Alternations (|)"
        }, 
        {
            "location": "/ftldns/regex/tutorial/#character-classes-class", 
            "text": "In addition to character groups, there are also some special character classes available, such as     Character class  Group equivalent  Interpretation      [:digit:]  [0-9]  matches digits    [:lower:]  [a-z]  matched lowercase letters    [:upper:]  [A-Z]  matched uppercase letters    [:alpha:]  [A-Za-z]  matches alphabetic characters    [:alnum:]  [A-Za-z0-9]  matches alphabetic characters and digits", 
            "title": "Character classes ([:class:])"
        }, 
        {
            "location": "/ftldns/regex/tutorial/#advanced-examples", 
            "text": "After going through our quick tutorial, we provide some more advances examples so you can test your knowledge.", 
            "title": "Advanced examples"
        }, 
        {
            "location": "/ftldns/regex/tutorial/#block-domain-with-only-numbers", 
            "text": "^[0-9][^a-z]+\\.((com)|(edu))$ \nBlocks domains containing only numbers (no letters) and ending in  .com  or  .edu . Blocks  555661.com , and  456.edu , but not  555g555.com", 
            "title": "Block domain with only numbers"
        }, 
        {
            "location": "/ftldns/regex/tutorial/#block-domains-without-subdomains", 
            "text": "^[a-z0-9]+([\\-]{1}[a-z0-9]+)*\\.[a-z]{2,7}$ \nA domain name shall not start or end with a dash but can contain any number of them. It must be followed by a  TLD  (we assume a valid  TLD  length of two to seven characters)", 
            "title": "Block domains without subdomains"
        }, 
        {
            "location": "/ftldns/regex/tutorial/#cheatsheet", 
            "text": "Expression  Meaning  Example      ^  Beginning of string  ^client  matches strings that begin with  client , such as  client.server.com  but not  more.client.server.com  (exception: within a character range ( [] )  ^  means negation)    $  End of string  ing$  matches  exciting  but not  ingenious    *  Match zero or more of the previous  ah*  matches  ahhhhh  or  a    ?  Match zero or one of the previous  ah?  matches  a  or  ah    +  Match one or more of the previous  ah+  matches  ah  or  ahhh  but not  a    .  Wildcard character, matches any character  do.*  matches  do ,  dog ,  door ,  dot , etc.; do.+  matches  dog ,  door ,  dot , etc. but not  do  (wildcard with  +  requires at least one extra character for matching)    ( )  Group  Enclose regular expressions, see the example for  |    |  Alternation  (mon|tues)day  matches  monday  or  tuesday  but not  friday  or  mondiag    [ ]  Matches a range of characters  [cbf]ar  matches  car ,  bar , or  far ;    [^]  Negation  [^0-9]  matches any character  except   0  to  9    { }  Matches a specified number of occurrences of the previous  [0-9]{3}  matches any three-digit number like  315  but not  31 ; [0-9]{2,4}  matches two- to four-digit numbers like  12 ,  123 , and  1234  but not  1  or  12345 ; [0-9]{2,}  matches any number with two or more digits like  1234567 ,  123456789 , but not  1    \\  Used to escape a special character not inside  []  google\\.com  matches  google.com", 
            "title": "Cheatsheet"
        }, 
        {
            "location": "/ftldns/privacylevels/", 
            "text": "Using privacy levels you can specify which level of detail you want to see in your Pi-hole statistics. The privacy level may be changed at any time without having to restart the \nDNS\n resolver. Note that queries with (partially) hidden details cannot be disclosed with a subsequent reduction of the privacy level. They can be changed either from the Settings page on the dashboard or in \nFTL\n's config file\n.\n\n\nThe available options are\n\n\nLevel 0 - show everything\n\n\nDoesn't hide anything, all statistics are available\n\n\nLevel 1 - hide domains\n\n\nShow and store all domains as \nhidden\n\n\nThis setting disables\n\n\n\n\nTop Domains\n\n\nTop Ads\n\n\n\n\nLevel 2 - hide domains and clients\n\n\nShow and store all domains as \nhidden\n and clients as \n0.0.0.0\n\n\nThis setting disables\n\n\n\n\nTop Domains\n\n\nTop Ads\n\n\nTop Clients\n\n\nClients over time\n\n\n\n\nLevel 3 - paranoia mode (hide everything)\n\n\nDisabled basically everything except the most anonymous statistics\n\n\nThis setting disables\n\n\n\n\nTop Domains\n\n\nTop Ads\n\n\nTop Clients\n\n\nClients over time\n\n\nQuery Log\n\n\nLong-term database logging", 
            "title": "Privacy levels"
        }, 
        {
            "location": "/ftldns/privacylevels/#level-0-show-everything", 
            "text": "Doesn't hide anything, all statistics are available", 
            "title": "Level 0 - show everything"
        }, 
        {
            "location": "/ftldns/privacylevels/#level-1-hide-domains", 
            "text": "Show and store all domains as  hidden  This setting disables   Top Domains  Top Ads", 
            "title": "Level 1 - hide domains"
        }, 
        {
            "location": "/ftldns/privacylevels/#level-2-hide-domains-and-clients", 
            "text": "Show and store all domains as  hidden  and clients as  0.0.0.0  This setting disables   Top Domains  Top Ads  Top Clients  Clients over time", 
            "title": "Level 2 - hide domains and clients"
        }, 
        {
            "location": "/ftldns/privacylevels/#level-3-paranoia-mode-hide-everything", 
            "text": "Disabled basically everything except the most anonymous statistics  This setting disables   Top Domains  Top Ads  Top Clients  Clients over time  Query Log  Long-term database logging", 
            "title": "Level 3 - paranoia mode (hide everything)"
        }, 
        {
            "location": "/ftldns/database/", 
            "text": "Pi-hole \nFTL\nDNS\n uses the well-known relational database management system \nSQLite3\n as it's long-term storage of query data. In contrast to many other database management solutions, \nFTL\nDNS\n does not need a server database engine as the database engine is directly embedded in \nFTL\nDNS\n. It seems an obvious choice as it is probably the most widely deployed database engine - it is used today by several widespread web browsers, operating systems, and embedded systems (such as mobile phones), among others. Hence, it is rich in supported platforms and offered features. SQLite implements most of the SQL-92 standard for SQL and can be used for high-level queries.\n\n\nWe update the database file periodically and on exit of \nFTL\nDNS\n (triggered e.g. by a \nservice pihole-FTL restart\n). The updating frequency can be controlled by the parameter \nDBINTERVAL\n and defaults to once per minute. We think this interval is sufficient to protect against data losses due to power failure events. \nFTL\nDNS\n needs the database to populate its internal history of the most recent 24 hours. If the database is disabled, \nFTL\nDNS\n will show an empty query history after a restart.\n\n\nThe location of the database can be configures by the config parameter \nDBFILE\n. It defaults to \n/etc/pihole/pihole-FTL.db\n. If the given file does not exist, \nFTL\nDNS\n will create a new (empty) database file.\n\n\nYou can split your long-term database by periodically rotating the database file (do this only when \npihole-FTL\n is \nnot\n running). The individual database contents can easily be merged when required.\nThis could be implemented by running a monthly \ncron\n job such as:\n\nsudo service pihole-FTL stop\nsudo mv /etc/pihole/pihole-FTL.db /media/backup/pihole-FTL_$(date +\n%m-%y\n).db\nsudo service pihole-FTL start\n\n\nNote that \nDNS\n resolution will not be available as long as \npihole-FTL\n is stopped.\n\n\nAnother way of controlling the size of the long-term database is setting a maximum age for log queries to keep using the config parameter \nMAXDBDAYS\n. It defaults to 365 days, i.e. queries that are older than one year get periodically removed to limit the growth of the long-term database file.\n\n\n\n\nThe long-term database contains three tables:\n\n\nQuery Table\n\n\n\n\n\n\n\n\nLabel\n\n\nType\n\n\nAllowed to by empty\n\n\nContent\n\n\n\n\n\n\n\n\n\n\nid\n\n\ninteger\n\n\nNo\n\n\nautoincrement \nID\n for the table, only used by \nSQLite3\n, not by \nFTL\nDNS\n\n\n\n\n\n\ntimestamp\n\n\ninteger\n\n\nNo\n\n\nUnix timestamp when this query arrived at \nFTL\nDNS\n (used as index)\n\n\n\n\n\n\ntype\n\n\ninteger\n\n\nNo\n\n\nType of this query (see \nSupported query types\n)\n\n\n\n\n\n\nstatus\n\n\ninteger\n\n\nNo\n\n\nHow was this query handled by \nFTL\nDNS\n? (see \nSupported status types\n)\n\n\n\n\n\n\ndomain\n\n\ntext\n\n\nNo\n\n\nRequested domain\n\n\n\n\n\n\nclient\n\n\ntext\n\n\nNo\n\n\nRequesting client (\nIP\n address)\n\n\n\n\n\n\nforward\n\n\ntext\n\n\nYes\n\n\nForward destination used for this query (only set if \nstatus == 2\n)\n\n\n\n\n\n\n\n\nSQLite3\n syntax used to create this table:\n\nCREATE TABLE queries ( id INTEGER PRIMARY KEY AUTOINCREMENT, timestamp INTEGER NOT NULL, type INTEGER NOT NULL, status INTEGER NOT NULL, domain TEXT NOT NULL, client TEXT NOT NULL, forward TEXT );\nCREATE INDEX idx_queries_timestamps ON queries (timestamp);\n\n\n\nCounters table\n\n\nThis table contains counter values integrated over the entire lifetime of the table\n\n\n\n\n\n\n\n\nLabel\n\n\nType\n\n\nAllowed to by empty\n\n\nContent\n\n\n\n\n\n\n\n\n\n\nid\n\n\ninteger\n\n\nNo\n\n\nID\n for the table used to select a counter (see below)\n\n\n\n\n\n\nvalue\n\n\ninteger\n\n\nNo\n\n\nValue of a given counter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCounter \nID\n\n\nInterpretation\n\n\n\n\n\n\n\n\n\n\n0\n\n\nTotal number of queries\n\n\n\n\n\n\n1\n\n\nTotal number of blocked queries (Query \nstatus\n 1, 4 or 5)\n\n\n\n\n\n\n\n\nSQLite3\n syntax used to create this table:\n\nCREATE TABLE counters ( id INTEGER PRIMARY KEY NOT NULL, value INTEGER NOT NULL );\n\n\n\nFTL\n table\n\n\nThe \nFTL\n tables contains some data used by \nFTL\nDNS\n for determining which queries to save to the database. This table does not contain any entries of general interest.\n\n\nSQLite3\n syntax used to create this table:\n\nCREATE TABLE ftl ( id INTEGER PRIMARY KEY NOT NULL, value BLOB NOT NULL );\n\n\n\nSupported query types\n\n\n\n\n\n\n\n\nID\n\n\nQuery Type\n\n\n\n\n\n\n\n\n\n\n1\n\n\nA\n\n\n\n\n\n\n2\n\n\nAAAA\n\n\n\n\n\n\n3\n\n\nANY\n\n\n\n\n\n\n4\n\n\nSRV\n\n\n\n\n\n\n5\n\n\nSOA\n\n\n\n\n\n\n6\n\n\nPTR\n\n\n\n\n\n\n7\n\n\nTXT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSupported status types\n\n\n\n\n\n\n\n\nID\n\n\nQuery Type\n\n\n\n\n\n\n\n\n\n\n0\n\n\nUnknown status (was not answered by forward destination)\n\n\n\n\n\n\n1\n\n\nBlocked by \ngravity.list\n\n\n\n\n\n\n2\n\n\nPermitted + forwarded\n\n\n\n\n\n\n3\n\n\nPermitted + replied to from cache\n\n\n\n\n\n\n4\n\n\nBlocked by wildcard\n\n\n\n\n\n\n5\n\n\nBlocked by \nblack.list\n\n\n\n\n\n\n\n\nExample for interaction with the \nFTL\n long-term database\n\n\nIn addition to the interactions the Pi-hole database \nAPI\n offers, you can also run your own SQL commands against the database. If you want to obtain the three most queries domains for all time, you could use\n\nsqlite3 \n/etc/pihole/pihole-FTL.db\n \nSELECT domain,count(domain) FROM queries WHERE (STATUS == 2 OR STATUS == 3) GROUP by domain order by count(domain) desc limit 3\n\n\n\nwhich would return something like\n\ndiscourse.pi-hole.net|421095\nwww.pi-hole.net|132483\nposteo.de|130243\n\n\nshowing the domain and the number of times it was found in the long-term database. Note that such a request might take very long for computation as the entire history of queries have to be processed for this.", 
            "title": "Long-term database"
        }, 
        {
            "location": "/ftldns/database/#query-table", 
            "text": "Label  Type  Allowed to by empty  Content      id  integer  No  autoincrement  ID  for the table, only used by  SQLite3 , not by  FTL DNS    timestamp  integer  No  Unix timestamp when this query arrived at  FTL DNS  (used as index)    type  integer  No  Type of this query (see  Supported query types )    status  integer  No  How was this query handled by  FTL DNS ? (see  Supported status types )    domain  text  No  Requested domain    client  text  No  Requesting client ( IP  address)    forward  text  Yes  Forward destination used for this query (only set if  status == 2 )     SQLite3  syntax used to create this table: CREATE TABLE queries ( id INTEGER PRIMARY KEY AUTOINCREMENT, timestamp INTEGER NOT NULL, type INTEGER NOT NULL, status INTEGER NOT NULL, domain TEXT NOT NULL, client TEXT NOT NULL, forward TEXT );\nCREATE INDEX idx_queries_timestamps ON queries (timestamp);", 
            "title": "Query Table"
        }, 
        {
            "location": "/ftldns/database/#counters-table", 
            "text": "This table contains counter values integrated over the entire lifetime of the table     Label  Type  Allowed to by empty  Content      id  integer  No  ID  for the table used to select a counter (see below)    value  integer  No  Value of a given counter        Counter  ID  Interpretation      0  Total number of queries    1  Total number of blocked queries (Query  status  1, 4 or 5)     SQLite3  syntax used to create this table: CREATE TABLE counters ( id INTEGER PRIMARY KEY NOT NULL, value INTEGER NOT NULL );", 
            "title": "Counters table"
        }, 
        {
            "location": "/ftldns/database/#ftl-table", 
            "text": "The  FTL  tables contains some data used by  FTL DNS  for determining which queries to save to the database. This table does not contain any entries of general interest.  SQLite3  syntax used to create this table: CREATE TABLE ftl ( id INTEGER PRIMARY KEY NOT NULL, value BLOB NOT NULL );", 
            "title": "FTL table"
        }, 
        {
            "location": "/ftldns/database/#supported-query-types", 
            "text": "ID  Query Type      1  A    2  AAAA    3  ANY    4  SRV    5  SOA    6  PTR    7  TXT", 
            "title": "Supported query types"
        }, 
        {
            "location": "/ftldns/database/#supported-status-types", 
            "text": "ID  Query Type      0  Unknown status (was not answered by forward destination)    1  Blocked by  gravity.list    2  Permitted + forwarded    3  Permitted + replied to from cache    4  Blocked by wildcard    5  Blocked by  black.list", 
            "title": "Supported status types"
        }, 
        {
            "location": "/ftldns/database/#example-for-interaction-with-the-ftl-long-term-database", 
            "text": "In addition to the interactions the Pi-hole database  API  offers, you can also run your own SQL commands against the database. If you want to obtain the three most queries domains for all time, you could use sqlite3  /etc/pihole/pihole-FTL.db   SELECT domain,count(domain) FROM queries WHERE (STATUS == 2 OR STATUS == 3) GROUP by domain order by count(domain) desc limit 3  \nwhich would return something like discourse.pi-hole.net|421095\nwww.pi-hole.net|132483\nposteo.de|130243 \nshowing the domain and the number of times it was found in the long-term database. Note that such a request might take very long for computation as the entire history of queries have to be processed for this.", 
            "title": "Example for interaction with the FTL long-term database"
        }, 
        {
            "location": "/ftldns/telnet-api/", 
            "text": "Connect via e.g. \ntelnet 127.0.0.1 4711\n or use \necho \"\ncommand\" | nc 127.0.0.1 4711\n\n\n\n\n\n\nquit\n: Closes connection to client\n\n\n\n\n\n\nkill\n: Terminates \nFTL\n\n\n\n\n\n\nstats\n : Get current statistics\n \ndomains_being_blocked 116007\ndns_queries_today 30163\nads_blocked_today 5650\nads_percentage_today 18.731558\nunique_domains 1056\nqueries_forwarded 4275\nqueries_cached 20238\nclients_ever_seen 11\nunique_clients 9\nstatus enabled\n\n\n\n\n\n\n\noverTime\n : over time data (10 min intervals)\n \n1525546500 163 0\n1525547100 154 1\n1525547700 164 0\n1525548300 167 0\n1525548900 151 0\n1525549500 143 0\n[...]\n\n\n\n\n\n\n\ntop-domains\n : get top domains\n \n0 8462 x.y.z.de\n1 236 safebrowsing-cache.google.com\n2 116 pi.hole\n3 109 z.y.x.de\n4 93 safebrowsing.google.com\n5 96 plus.google.com\n[...]\n\n\n Variant: \ntop-domains (15)\n to show (up to) 15 entries\n\n\n\n\n\n\ntop-ads\n : get top ad domains\n \n0 8 googleads.g.doubleclick.net\n1 6 www.googleadservices.com\n2 1 cdn.mxpnl.com\n3 1 collector.githubapp.com\n4 1 www.googletagmanager.com\n5 1 s.zkcdn.net\n[...]\n\n\n Variant: \ntop-ads (14)\n to show (up to) 14 entries\n\n\n\n\n\n\ntop-clients\n : get recently active top clients (\nIP\n addresses + host names (if available))\n \n0 9373 192.168.2.1 router\n1 484 192.168.2.2 work-machine\n2 8 127.0.0.1 localhost\n\n\n Variant: \ntop-clients (9)\n to show (up to) 9 client entries or \ntop-clients withzero (15)\n to show (up to) 15 clients even if they have not been active recently (see PR #124 for further details)\n\n\n\n\n\n\nforward-dest\n : get forward destinations (\nIP\n addresses + host names (if available)) along with the percentage. The first result (\nID\n -2) will always be the percentage of domains answered from blocklists, whereas the second result (\nID\n -1) will be the queries answered from cache\n \n-2 18.70 blocklist blocklist\n-1 67.10 cache cache\n0 14.20 127.0.0.1 localhost\n\n\n Variant: \nforward-dest unsorted\n to show forward destinations in unsorted order (equivalent to using \nforward-names\n)\n\n\n\n\n\n\nquerytypes\n : get collected query types percentage\n \nA (IPv4): 53.45\nAAAA (IPv6): 45.32\nANY: 0.00\nSRV: 0.64\nSOA: 0.05\nPTR: 0.54\nTXT: 0.00\n\n\n\n\n\n\n\ngetallqueries\n : get all queries that \nFTL\n has in memory\n \n1525554586 A fonts.googleapis.com 192.168.2.100 3 0 4 6\n1525554586 AAAA fonts.googleapis.com 192.168.2.100 3 0 4 5\n1525554586 A www.mkdocs.org 192.168.2.100 3 0 4 7\n1525554586 AAAA www.mkdocs.org 192.168.2.100 2 0 3 21\n1525554586 A squidfunk.github.io 192.168.2.100 2 0 3 20\n1525554586 A pi-hole.net 192.168.2.100 3 0 4 5\n1525554586 AAAA squidfunk.github.io 192.168.2.100 3 0 1 6\n1525554586 AAAA pi-hole.net 192.168.2.100 2 0 1 18\n1525554586 A github.com 192.168.2.100 3 0 4 5\n1525554586 AAAA github.com 192.168.2.100 2 0 1 18\n\n\n Variants: \ngetallqueries (37)\n show (up to) 37 latest entries, \ngetallqueries-time 1483964295 1483964312\n gets all queries that \nFTL\n has in its database in a limited time interval, \ngetallqueries-time 1483964295 1483964312 (17)\n show matches in the (up to) 17 latest entries, \ngetallqueries-domain www.google.com\n gets all queries that \nFTL\n has in its database for a specific domain name, \ngetallqueries-client 2.3.4.5\n : gets all queries that \nFTL\n has in its database for a specific client name \nor\n \nIP\n\n\n\n\n\n\nrecentBlocked\n : get most recently pi-holed domain name\n \nwww.googleadservices.com\n\n\n Variant: \nrecentBlocked (4)\n show the four most recent blocked domains\n\n\n\n\n\n\nmemory\n : get information about \nFTL\n's memory usage due to its internal data structure\n \nmemory allocated for internal data structure: 2944708 bytes (2.94 MB)\ndynamically allocated allocated memory used for strings: 23963 bytes (23.96 KB)\nSum: 2968671 bytes (2.97 MB)\n\n\n\n\n\n\n\nclientID\n : Get \nID\n of currently connected client\n \n6\n\n\n\n\n\n\n\nversion\n : Get version information of the currently running \nFTL\n instance\n \nversion v1.6-3-g106498d-dirty\ntag v1.6\nbranch master\nhash 106498d\ndate 2017-03-26 13:10:43 +0200\n\n\n\n\n\n\n\ndbstats\n : Get some statistics about \nFTL\n's' long-term storage database (this request may take some time for processing in case of a large database file)\n \nqueries in database: 2700304\ndatabase filesize: 199.20 MB\nSQLite version: 3.23.1\n\n\n\n\n\n\n\ndomain pi-hole.net\n: Get detailed information about domain (if available)\n \nDomain \npi-hole.net\n, ID: 254\nTotal: 179\nBlocked: 0\nWildcard blocked: false\n\n\n\n\n\n\n\ncacheinfo\n: Get \nDNS\n server cache size and usage information\n \ncache-size: 500000\ncache-live-freed: 0\ncache-inserted: 15529", 
            "title": "Telnet API"
        }, 
        {
            "location": "/ftldns/compatibility/", 
            "text": "FTL\nDNS\n compatibility list\n\n\nWe tested \nFTL\nDNS\n on the following devices:\n\n\n\n\n\n\n\n\nBoard\n\n\nTested \nOS\n\n\nCPU\n architecture\n\n\nSuitable binaries\n\n\n\n\n\n\n\n\n\n\nVirtualBox\n\n\nUbuntu 16.10\n\n\namd64\n\n\nlinux-x86_64\n\n\n\n\n\n\nRaspberry Pi Zero\n\n\nRaspbian Jessie, Stretch\n\n\narmv6l\n\n\narm-linux-gnueabi\n\n\n\n\n\n\nRaspberry Pi 1\n\n\nRaspbian Jessie, Stretch\n\n\narmv6\n\n\narm-linux-gnueabi\n\n\n\n\n\n\nRaspberry Pi 2\n\n\nRaspbian Jessie, Stretch\n\n\narmv7l\n\n\narm-linux-gnueabihf\n and \narm-linux-gnuabi\n\n\n\n\n\n\nRaspberry Pi 3\n\n\nRaspbian Jessie, Stretch\n\n\narmv7l\n\n\narm-linux-gnuabi\n and \narm-linux-gnueabihf\n\n\n\n\n\n\nRaspberry Pi 3 B+\n\n\nRaspbian Jessie, Stretch\n\n\narmv7l\n\n\narm-linux-gnuabi\n and \narm-linux-gnueabihf\n\n\n\n\n\n\nRaspberry Pi 3\n\n\nopenSUSE\n\n\naarch64\n\n\naarch64-linux-gnu\n\n\n\n\n\n\nNanoPi NEO\n\n\narmbian Ubuntu 16.04\n\n\narmv7l\n\n\narm-linux-gnueabihf\n\n\n\n\n\n\nOdroid-C2\n\n\nUbuntu 16.04\n\n\naarch64\n\n\naarch64-linux-gnu\n\n\n\n\n\n\nC.H.I.P\n\n\nDebian\n\n\narmv7l\n\n\narm-linux-gnueabihf\n\n\n\n\n\n\nOrangePi Zero\n\n\narmbian Ubuntu 16.04\n\n\narmv7l\n\n\narm-linux-gnueabihf\n\n\n\n\n\n\nBeagleBone Black\n\n\nDebian Jessie, Stretch\n\n\narmv7l\n\n\narm-linux-gnueabihf\n\n\n\n\n\n\n\n\n\n\n\nDevices we do not officially support include MIPS and \narmv5\n (or lower) devices. You may, however, be successful with building binaries yourself from the source code, but we do not provide pre-built binaries for these targets.", 
            "title": "Compatibility"
        }, 
        {
            "location": "/ftldns/compatibility/#ftldns-compatibility-list", 
            "text": "We tested  FTL DNS  on the following devices:     Board  Tested  OS  CPU  architecture  Suitable binaries      VirtualBox  Ubuntu 16.10  amd64  linux-x86_64    Raspberry Pi Zero  Raspbian Jessie, Stretch  armv6l  arm-linux-gnueabi    Raspberry Pi 1  Raspbian Jessie, Stretch  armv6  arm-linux-gnueabi    Raspberry Pi 2  Raspbian Jessie, Stretch  armv7l  arm-linux-gnueabihf  and  arm-linux-gnuabi    Raspberry Pi 3  Raspbian Jessie, Stretch  armv7l  arm-linux-gnuabi  and  arm-linux-gnueabihf    Raspberry Pi 3 B+  Raspbian Jessie, Stretch  armv7l  arm-linux-gnuabi  and  arm-linux-gnueabihf    Raspberry Pi 3  openSUSE  aarch64  aarch64-linux-gnu    NanoPi NEO  armbian Ubuntu 16.04  armv7l  arm-linux-gnueabihf    Odroid-C2  Ubuntu 16.04  aarch64  aarch64-linux-gnu    C.H.I.P  Debian  armv7l  arm-linux-gnueabihf    OrangePi Zero  armbian Ubuntu 16.04  armv7l  arm-linux-gnueabihf    BeagleBone Black  Debian Jessie, Stretch  armv7l  arm-linux-gnueabihf      Devices we do not officially support include MIPS and  armv5  (or lower) devices. You may, however, be successful with building binaries yourself from the source code, but we do not provide pre-built binaries for these targets.", 
            "title": "FTLDNS compatibility list"
        }, 
        {
            "location": "/ftldns/compile/", 
            "text": "We pre-compile \nFTL\nDNS\n for you to save you the trouble of compiling anything yourself. However, sometimes you may want to make your own modifications. To test them, you have to compile \nFTL\nDNS\n from source. Luckily, you don't have to be a programmer to build \nFTL\nDNS\n from source and install it on your system; you only have to know the basics we provide in here. With just a few commands, you can build \nFTL\nDNS\n from source like a pro.\n\n\nInstalling the Required Software\n\n\nFirst, we'll install the basic software you'll need to compile from source, like the \nGCC\n compiler and other utilities.\nInstall them by running the following command in a terminal:\n\nsudo apt install build-essential libgmp-dev m4\n\n\n\nYou'll also need to compile a recent version of \nnettle\n as \nFTL\nDNS\n uses \nlibnettle\n for handling DNSSEC. Compile and install a recent version of \nnettle\n (we tested 3.4):\n\nwget https://ftp.gnu.org/gnu/nettle/nettle-3.4.tar.gz\ntar -xvzf nettle-3.4.tar.gz\ncd nettle-3.4\n./configure\nmake\nsudo make install\n\n\n\nGet the \nFTL\nDNS\n source\n\n\nNow, clone the \nFTL\nDNS\n \nrepo\n (or your own fork) to get the source code of \nFTL\nDNS\n:\n\ngit clone https://github.com/pi-hole/FTL.git\ncd FTL\n\n\n\nIf you want to build another branch and not \nmaster\n, use checkout to get to this branch (e.g. \ngit checkout development\n).\n\n\nFTL\nDNS\n can now be compiled and installed:\n\nmake -j 4\nsudo make install\n\n\n\nFinally, restart \nFTL\nDNS\n to use the new binary:\n\nsudo service pihole-FTL restart", 
            "title": "Install from source"
        }, 
        {
            "location": "/ftldns/compile/#installing-the-required-software", 
            "text": "First, we'll install the basic software you'll need to compile from source, like the  GCC  compiler and other utilities.\nInstall them by running the following command in a terminal: sudo apt install build-essential libgmp-dev m4  You'll also need to compile a recent version of  nettle  as  FTL DNS  uses  libnettle  for handling DNSSEC. Compile and install a recent version of  nettle  (we tested 3.4): wget https://ftp.gnu.org/gnu/nettle/nettle-3.4.tar.gz\ntar -xvzf nettle-3.4.tar.gz\ncd nettle-3.4\n./configure\nmake\nsudo make install", 
            "title": "Installing the Required Software"
        }, 
        {
            "location": "/ftldns/compile/#get-the-ftldns-source", 
            "text": "Now, clone the  FTL DNS   repo  (or your own fork) to get the source code of  FTL DNS : git clone https://github.com/pi-hole/FTL.git\ncd FTL  If you want to build another branch and not  master , use checkout to get to this branch (e.g.  git checkout development ).  FTL DNS  can now be compiled and installed: make -j 4\nsudo make install  Finally, restart  FTL DNS  to use the new binary: sudo service pihole-FTL restart", 
            "title": "Get the FTLDNS source"
        }, 
        {
            "location": "/ftldns/debugging/", 
            "text": "Once you are used to it, you can skip most of the steps. Debugging \nFTL\nDNS\n is actually quite easy as \npihole-FTL\n has been designed such that a debugger can be attached to an already running process. It can give you insights into how software (not limited to \npihole-FTL\n) works.\n\n\n\n\nInstall \nscreen\n and \ngdb\n using \nsudo apt-get install screen gdb\n\n\nStart a screen session (it will allow you to come back even if the \nSSH\n connection died)\n\n\nIf you don't know about \nscreen\n, then read about it (you \nwill\n love it!)\n\n\nStart a screen session using \nscreen\n\n\nUse \nsudo gdb -p $(pidof pihole-FTL)\n to attach the debugger to the already running \npihole-FTL\n process\n\n\nOnce loading of the symbols has finished (the \n(gdb)\n input prompt is shown), run \nhandle SIGHUP nostop SIGPIPE nostop\n\n\nEnter \ncontinue\n to continue operation of \npihole-FTL\n inside the debugger. All debugger features are now available.\n\n\nWhen \npihole-FTL\n has crashed, copy\npaste the terminal output into a (new) issue. Also type \nbacktrace\n and include its output. We might ask for additional information in order to isolate your particular issue.", 
            "title": "Debugging FTLDNS"
        }, 
        {
            "location": "/ftldns/in-depth/", 
            "text": "Available interfaces\n\n\nPi-hole stats can be accessed via a standard Unix socket (\nvar/run/pihole/FTL.sock\n), a telnet-like connection (\nTCP\n socket on port \n4711\n) as well as indirectly via the Web \nAPI\n (\nadmin/api.php\n), and command line (\npihole -c -j\n). You can out find more details below.\n\n\nCommand line arguments\n\n\n\n\ndebug\n - Don't go into daemon mode (stay in foreground) + more verbose logging\n\n\ntest\n - Start \nFTL\n and process everything, but shut down immediately afterwards\n\n\nversion\n - Don't start \nFTL\n, show only version\n\n\ntag\n - Don't start \nFTL\n, show only git tag\n\n\nbranch\n - Don't start \nFTL\n, show only git branch \nFTL\n was compiled from\n\n\nno-daemon\n or \n-f\n - Don't go into background (daemon mode)\n\n\nhelp\n or \n-h\n - Don't start \nFTL\n, show help\n\n\ndnsmasq-test\n - Test resolver config file syntax\n\n\n--\n everything behind \n--\n will be passed as options to the internal resolver\n\n\n\n\nCommand line arguments can be arbitrarily combined, e.g. \npihole-FTL debug test\n\n\nFile locations\n\n\n\n\n/var/log/pihole-FTL.log\n log file\n\n\n/var/run/pihole-FTL.pid\n \nPID\n file\n\n\n/var/run/pihole-FTL.port\n file containing port on which \nFTL\n is listening\n\n\n/var/run/pihole/FTL.sock\n Unix socket\n\n\n\n\nDomain lists format\n\n\nSince Pi-hole v4.0, we use a simpler domain list format for the two important block list files \ngravity.list\n and \nblack.list\n. In contrast to the traditional \nHOSTS\n format (which caused a lot of overhead), the domain list format is the minimal possible solution for saving memory while still using plain text lists for your convenience. When \nFTL\nDNS\n imports these two files, they are walked by our improved list parser speeding up the loading of block lists significantly. Regardless which blocking mode (\nIP\n or \nNXDOMAIN\n) is selected, \nFTL\nDNS\n will always load the lists into it's internal hashed cache to be able to determine the blocking status within a few milliseconds, even when you're using huge blocking lists on low-end devices. With everything we do, we design \nFTL\nDNS\n for maximum efficiency also on low-performance devices.\n\n\nLinux capabilities\n\n\nCapabilities (\nPOSIX\n 1003.1e, \ncapabilities(7)\n) provide fine-grained control over superuser permissions, allowing use of the \nroot\n user to be avoided.\nFor the purpose of performing permission checks, traditional UNIX implementations distinguish two categories of processes: \nprivileged processes\n (superuser or \nroot\n), and \nunprivileged processes\n. Privileged processes bypass all kernel permission checks, while unprivileged processes are subject to full permission checking based on the process's credentials (user and group permissions and supplementary process capabilities). Capabilities are implemented on Linux using extended attributes (\nxattr(7)\n) in the \nsecurity\n namespace. Extended attributes are supported by all major Linux file systems, including \nExt2\n, \nExt3\n, \nExt4\n, \nBtrfs\n, \nJFS\n, \nXFS\n, and \nReiserFS\n.\n\n\nFor your safety and comfort, \npihole-FTL\n is run by the entirely unprivileged user \npihole\n.\nWhereas \ndnsmasq\n is running as \nroot\n process, we designed \npihole-FTL\n to be run by the entirely unprivileged user \npihole\n. As a consequence, \npihole-FTL\n will not be able to access the files of any other user on this system or mess around with your system's configuration.\n\n\nHowever, this also implies that \nFTL\nDNS\n cannot bind to ports 53 (\nDNS\n) among some other necessary capabilities related to \nDHCP\n services. To establish a strong security model, we explicitly grant the \npihole-FTL\n process additional capabilities so that \npihole-FTL\n (but no other processes which may be started by \npihole\n) can bind to port 53, etc., without giving any additional permissions to the \npihole\n user.\n\n\nWe specifically add the following capabilities to \npihole-FTL\n:\n\n\n\n\nCAP_NET_BIND_SERVICE\n: Allows \nFTL\nDNS\n binding to \nTCP\n/\nUDP\n sockets below 1024 (specifically \nDNS\n service on port 53)\n\n\nCAP_NET_RAW\n: use raw and packet sockets (we need a RAW socket for handling \nDHCPv6\n requests)\n\n\nCAP_NET_ADMIN\n: modify routing tables and other network-related operations (to allow for handling \nDHCP\n requests)\n\n\n\n\nUsers that cannot use Linux capabilites for various reasons (lacking kernel or file system support) can modify the startup scripts of \npihole-FTL\n to ensure the daemon is started as \nroot\n. However, be aware of that you do so on your own risk (although we don't expect problems to arise).", 
            "title": "In-depth manual"
        }, 
        {
            "location": "/ftldns/in-depth/#available-interfaces", 
            "text": "Pi-hole stats can be accessed via a standard Unix socket ( var/run/pihole/FTL.sock ), a telnet-like connection ( TCP  socket on port  4711 ) as well as indirectly via the Web  API  ( admin/api.php ), and command line ( pihole -c -j ). You can out find more details below.", 
            "title": "Available interfaces"
        }, 
        {
            "location": "/ftldns/in-depth/#command-line-arguments", 
            "text": "debug  - Don't go into daemon mode (stay in foreground) + more verbose logging  test  - Start  FTL  and process everything, but shut down immediately afterwards  version  - Don't start  FTL , show only version  tag  - Don't start  FTL , show only git tag  branch  - Don't start  FTL , show only git branch  FTL  was compiled from  no-daemon  or  -f  - Don't go into background (daemon mode)  help  or  -h  - Don't start  FTL , show help  dnsmasq-test  - Test resolver config file syntax  --  everything behind  --  will be passed as options to the internal resolver   Command line arguments can be arbitrarily combined, e.g.  pihole-FTL debug test", 
            "title": "Command line arguments"
        }, 
        {
            "location": "/ftldns/in-depth/#file-locations", 
            "text": "/var/log/pihole-FTL.log  log file  /var/run/pihole-FTL.pid   PID  file  /var/run/pihole-FTL.port  file containing port on which  FTL  is listening  /var/run/pihole/FTL.sock  Unix socket", 
            "title": "File locations"
        }, 
        {
            "location": "/ftldns/in-depth/#domain-lists-format", 
            "text": "Since Pi-hole v4.0, we use a simpler domain list format for the two important block list files  gravity.list  and  black.list . In contrast to the traditional  HOSTS  format (which caused a lot of overhead), the domain list format is the minimal possible solution for saving memory while still using plain text lists for your convenience. When  FTL DNS  imports these two files, they are walked by our improved list parser speeding up the loading of block lists significantly. Regardless which blocking mode ( IP  or  NXDOMAIN ) is selected,  FTL DNS  will always load the lists into it's internal hashed cache to be able to determine the blocking status within a few milliseconds, even when you're using huge blocking lists on low-end devices. With everything we do, we design  FTL DNS  for maximum efficiency also on low-performance devices.", 
            "title": "Domain lists format"
        }, 
        {
            "location": "/ftldns/in-depth/#linux-capabilities", 
            "text": "Capabilities ( POSIX  1003.1e,  capabilities(7) ) provide fine-grained control over superuser permissions, allowing use of the  root  user to be avoided.\nFor the purpose of performing permission checks, traditional UNIX implementations distinguish two categories of processes:  privileged processes  (superuser or  root ), and  unprivileged processes . Privileged processes bypass all kernel permission checks, while unprivileged processes are subject to full permission checking based on the process's credentials (user and group permissions and supplementary process capabilities). Capabilities are implemented on Linux using extended attributes ( xattr(7) ) in the  security  namespace. Extended attributes are supported by all major Linux file systems, including  Ext2 ,  Ext3 ,  Ext4 ,  Btrfs ,  JFS ,  XFS , and  ReiserFS .  For your safety and comfort,  pihole-FTL  is run by the entirely unprivileged user  pihole .\nWhereas  dnsmasq  is running as  root  process, we designed  pihole-FTL  to be run by the entirely unprivileged user  pihole . As a consequence,  pihole-FTL  will not be able to access the files of any other user on this system or mess around with your system's configuration.  However, this also implies that  FTL DNS  cannot bind to ports 53 ( DNS ) among some other necessary capabilities related to  DHCP  services. To establish a strong security model, we explicitly grant the  pihole-FTL  process additional capabilities so that  pihole-FTL  (but no other processes which may be started by  pihole ) can bind to port 53, etc., without giving any additional permissions to the  pihole  user.  We specifically add the following capabilities to  pihole-FTL :   CAP_NET_BIND_SERVICE : Allows  FTL DNS  binding to  TCP / UDP  sockets below 1024 (specifically  DNS  service on port 53)  CAP_NET_RAW : use raw and packet sockets (we need a RAW socket for handling  DHCPv6  requests)  CAP_NET_ADMIN : modify routing tables and other network-related operations (to allow for handling  DHCP  requests)   Users that cannot use Linux capabilites for various reasons (lacking kernel or file system support) can modify the startup scripts of  pihole-FTL  to ensure the daemon is started as  root . However, be aware of that you do so on your own risk (although we don't expect problems to arise).", 
            "title": "Linux capabilities"
        }, 
        {
            "location": "/guides/unbound/", 
            "text": "The problem: Whom can you trust?\n\n\nPi-hole includes a caching and \nforwarding\n DNS server, now known as \nFTL\nDNS. After applying the blocking lists, it forwards requests made by the clients to configured upstream DNS server(s). However, as has been mentioned by several users in the past, this leads to some privacy concerns as it ultimately raises the question: \nWhom can you trust?\n Recently, more and more small (and not so small) DNS upstream providers have appeared on the market, advertising free and private DNS service, but how can you know that they keep their promises? Right, you can't.\n\n\nFurthermore, from the point of an attacker, the DNS servers of larger providers are very worthwhile targets, as they only need to poison one DNS server, but millions of users might be affected. Instead of your bank's actual IP address, you could be sent to a phishing site hosted on some island. This scenario has \nalready happened\n and it isn't unlikely to happen again...\n\n\nWhen you operate your own (tiny) recursive DNS server, then the likeliness of getting affected by such an attack is greatly reduced.\n\n\nWhat \nis\n a recursive DNS server?\n\n\nThe first distinction we have to be aware of is whether a DNS server is \nauthoritative\n or not.  If I'm the authoritative server for, e.g., \npi-hole.net\n, then I know which IP is the correct answer for a query. Recursive name servers, in contrast, resolve any query they receive by consulting the servers authoritative for this query by traversing the domain.\nExample: We want to resolve \npi-hole.net\n. On behalf of the client, the recursive DNS server will traverse the path of the domain across the Internet to deliver the answer to the question.\n\n\nWhat does this guide provide?\n\n\nIn only a few simple steps, we will describe how to set up your own recursive DNS server. It will run on the same device you're already using for your Pi-hole. There are no additional hardware requirements.\n\n\nThis guide assumes a fairly recent Debian/Ubuntu based system and will use the maintainer provided packages for installation to make it an incredibly simple process. It assumes only very basic knowledge of how DNS works.\n\n\nA \nstandard\n Pi-hole installation will do it as follows:\n\n\n\n\nYour client asks the Pi-hole \nWho is pi-hole.net\n?\n\n\nYour Pi-hole will check its cache and reply if the answer is already known.\n\n\nYour Pi-hole will check the blocking lists and reply if the domain is blocked.\n\n\nSince neither 2. nor 3. is true in our example, the Pi-hole forwards the request to the configured \nexternal\n upstream DNS server(s).\n\n\nUpon receiving the answer, your Pi-hole will reply to your client and tell it the answer of its request.\n\n\nLastly, your Pi-hole will save the answer in its cache to be able to respond faster if \nany\n of your clients queries the same domain again.\n\n\n\n\nAfter you set up your Pi-hole as described in this guide, this procedure changes notably:\n\n\n\n\nYour client asks the Pi-hole \nWho is pi-hole.net\n?\n\n\nYour Pi-hole will check its cache and reply if the answer is already known.\n\n\nYour Pi-hole will check the blocking lists and reply if the domain is blocked.\n\n\nSince neither 2. nor 3. is true in our example, the Pi-hole delegates the request to the (local) recursive DNS resolver.\n\n\nYour recursive server will send a query to the DNS root servers: \"Who is handling \n.net\n?\"\n\n\nThe root server answers with a referral to the TLD servers for \n.net\n.\n\n\nYour recursive server will send a query to one of the TLD DNS servers for \n.net\n: \"Who is handling \npi-hole.net\n?\"\n\n\nThe TLD server answers with a referral to the authoritative name servers for \npi-hole.net\n.\n\n\nYour recursive server will send a query to the authoritative name servers: \"What is the IP of \npi-hole.net\n?\"\n\n\nThe authoritative server will answer with the IP address of the domain \npi-hole.net\n.\n\n\nYour recursive server will send the reply to your Pi-hole which will, in turn, reply to your client and tell it the answer of its request.\n\n\nLastly, your Pi-hole will save the answer in its cache to be able to respond faster if \nany\n of your clients queries the same domain again.\n\n\n\n\nYou can easily imagine even longer chains for subdomains as the query process continues until your recursive resolver reaches the authoritative server for the zone that contains the queried domain name. It is obvious that the methods are very different and the own recursion is more involved than \"just\" asking some upstream server. This has benefits and drawbacks:\n\n\n\n\n\n\nBenefit: Privacy - as you're directly contacting the responsive servers, no server can fully log the exact paths you're going, as e.g. the Google DNS servers will only be asked if you want to visit a Google website, but not if you visit the website of your favorite newspaper, etc.\n\n\n\n\n\n\nDrawback: Traversing the path may be slow, especially for the first time you visit a website - while the bigger DNS providers always have answers for commonly used domains in their cache, you will have to transverse the path if you visit a page for the first time time. A first request to a formerly unknown TLD may take up to a second (or even more if you're also using DNSSEC). Subsequent requests to domains under the same TLD usually complete in \n 0.1s\n.\nFortunately, both your Pi-hole as well as your recursive server will be configured for efficient caching to minimize the number of queries that will actually have to be performed.\n\n\n\n\n\n\nSetting up Pi-hole as a recursive DNS server solution\n\n\nWe will use \nunbound\n, a secure open source recursive DNS server primarily developed by NLnet Labs, VeriSign Inc., Nominet, and Kirei.\nThe first thing you need to do is to install the recursive DNS resolver:\n\nsudo apt install unbound\n\n\n\nOptional: Download the list of primary root servers (serving the domain \n.\n). Unbound ships its own list but we can also download the most recent list and update it whenever we think it is a good idea. Note: there is no point in doing it more often then every 6 months.\n\nwget -O root.hints https://www.internic.net/domain/named.root \nsudo mv root.hints /var/lib/unbound/\n\n\n\nConfigure \nunbound\n\n\nHighlights:\n- Listen only for queries from the local Pi-hole installation (on port 5353)\n- Listen for both UDP and TCP requests\n- Verify DNSSEC signatures, discarding BOGUS domains\n- Apply a few security and privacy tricks\n\n\n/etc/unbound/unbound.conf.d/pi-hole.conf\n:\n\nserver:\n\n    \nverbosity: 1\n\n    \nport: 5353\n\n    \ndo-ip4: yes\n\n    \ndo-udp: yes\n\n    \ndo-tcp: yes\n\n\n    \n# May be set to yes if you have IPv6 connectivity\n\n    \ndo-ip6: no\n\n\n    \n# Use this only when you downloaded the list of primary root servers!\n\n    \nroot-hints: \n/var/lib/unbound/root.hints\n\n\n    \n# Trust glue only if it is within the servers authority\n\n    \nharden-glue: yes\n\n\n    \n# Require DNSSEC data for trust-anchored zones, if such data is absent, the zone becomes BOGUS\n\n    \nharden-dnssec-stripped: yes\n\n\n    \n# Don\nt use Capitalization randomization as it known to cause DNSSEC issues sometimes\n\n    \n# see https://discourse.pi-hole.net/t/unbound-stubby-or-dnscrypt-proxy/9378 for further details\n\n    \nuse-caps-for-id: no\n\n\n    \n# Reduce EDNS reassembly buffer size.\n\n    \n# Suggested by the unbound man page to reduce fragmentation reassembly problems\n\n    \nedns-buffer-size: 1472\n\n\n    \n# TTL bounds for cache\n\n    \ncache-min-ttl: 3600\n\n    \ncache-max-ttl: 86400\n\n\n    \n# Perform prefetching of close to expired message cache entries\n\n    \n# This only applies to domains that have been frequently queried\n\n    \nprefetch: yes\n\n\n    \n# One thread should be sufficient, can be increased on beefy machines\n\n    \nnum-threads: 1\n\n\n    \n# Ensure kernel buffer is large enough to not loose messages in traffic spikes\n\n    \nso-rcvbuf: 1m\n\n\n    \n# Ensure privacy of local IP ranges\n\n    \nprivate-address: 192.168.0.0/16\n\n    \nprivate-address: 172.16.0.0/12\n\n    \nprivate-address: 10.0.0.0/8\n\n\n\n\nStart your local recursive server and test that it's operational:\n\nsudo\n \nservice\n \nunbound\n \nstart\n\n\ndig\n \npi\n-\nhole\n.\nnet\n \n@127.0.0.1\n \n-\np\n \n5353\n\n\n\nThe first query may be quite slow, but subsequent queries, also to other domains under the same TLD, should be fairly quick.\n\n\nTest validation\n\n\nYou can test DNSSEC validation using\n\ndig\n \nsigfail\n.\nverteiltesysteme\n.\nnet\n \n@127.0.0.1\n \n-\np\n \n5353\n\n\ndig\n \nsigok\n.\nverteiltesysteme\n.\nnet\n \n@127.0.0.1\n \n-\np\n \n5353\n\n\n\nThe first command should give a status report of \nSERVFAIL\n and no IP address. The second should give \nNOERROR\n plus an IP address.\n\n\nConfigure Pi-hole\n\n\nFinally, configure Pi-hole to use your recursive DNS server:\n\n\n\n\n(don't forget to hit Return or click on \nSave\n)", 
            "title": "Pi-hole as All-Around DNS Solution"
        }, 
        {
            "location": "/guides/unbound/#the-problem-whom-can-you-trust", 
            "text": "Pi-hole includes a caching and  forwarding  DNS server, now known as  FTL DNS. After applying the blocking lists, it forwards requests made by the clients to configured upstream DNS server(s). However, as has been mentioned by several users in the past, this leads to some privacy concerns as it ultimately raises the question:  Whom can you trust?  Recently, more and more small (and not so small) DNS upstream providers have appeared on the market, advertising free and private DNS service, but how can you know that they keep their promises? Right, you can't.  Furthermore, from the point of an attacker, the DNS servers of larger providers are very worthwhile targets, as they only need to poison one DNS server, but millions of users might be affected. Instead of your bank's actual IP address, you could be sent to a phishing site hosted on some island. This scenario has  already happened  and it isn't unlikely to happen again...  When you operate your own (tiny) recursive DNS server, then the likeliness of getting affected by such an attack is greatly reduced.", 
            "title": "The problem: Whom can you trust?"
        }, 
        {
            "location": "/guides/unbound/#what-is-a-recursive-dns-server", 
            "text": "The first distinction we have to be aware of is whether a DNS server is  authoritative  or not.  If I'm the authoritative server for, e.g.,  pi-hole.net , then I know which IP is the correct answer for a query. Recursive name servers, in contrast, resolve any query they receive by consulting the servers authoritative for this query by traversing the domain.\nExample: We want to resolve  pi-hole.net . On behalf of the client, the recursive DNS server will traverse the path of the domain across the Internet to deliver the answer to the question.", 
            "title": "What is a recursive DNS server?"
        }, 
        {
            "location": "/guides/unbound/#what-does-this-guide-provide", 
            "text": "In only a few simple steps, we will describe how to set up your own recursive DNS server. It will run on the same device you're already using for your Pi-hole. There are no additional hardware requirements.  This guide assumes a fairly recent Debian/Ubuntu based system and will use the maintainer provided packages for installation to make it an incredibly simple process. It assumes only very basic knowledge of how DNS works.  A  standard  Pi-hole installation will do it as follows:   Your client asks the Pi-hole  Who is pi-hole.net ?  Your Pi-hole will check its cache and reply if the answer is already known.  Your Pi-hole will check the blocking lists and reply if the domain is blocked.  Since neither 2. nor 3. is true in our example, the Pi-hole forwards the request to the configured  external  upstream DNS server(s).  Upon receiving the answer, your Pi-hole will reply to your client and tell it the answer of its request.  Lastly, your Pi-hole will save the answer in its cache to be able to respond faster if  any  of your clients queries the same domain again.   After you set up your Pi-hole as described in this guide, this procedure changes notably:   Your client asks the Pi-hole  Who is pi-hole.net ?  Your Pi-hole will check its cache and reply if the answer is already known.  Your Pi-hole will check the blocking lists and reply if the domain is blocked.  Since neither 2. nor 3. is true in our example, the Pi-hole delegates the request to the (local) recursive DNS resolver.  Your recursive server will send a query to the DNS root servers: \"Who is handling  .net ?\"  The root server answers with a referral to the TLD servers for  .net .  Your recursive server will send a query to one of the TLD DNS servers for  .net : \"Who is handling  pi-hole.net ?\"  The TLD server answers with a referral to the authoritative name servers for  pi-hole.net .  Your recursive server will send a query to the authoritative name servers: \"What is the IP of  pi-hole.net ?\"  The authoritative server will answer with the IP address of the domain  pi-hole.net .  Your recursive server will send the reply to your Pi-hole which will, in turn, reply to your client and tell it the answer of its request.  Lastly, your Pi-hole will save the answer in its cache to be able to respond faster if  any  of your clients queries the same domain again.   You can easily imagine even longer chains for subdomains as the query process continues until your recursive resolver reaches the authoritative server for the zone that contains the queried domain name. It is obvious that the methods are very different and the own recursion is more involved than \"just\" asking some upstream server. This has benefits and drawbacks:    Benefit: Privacy - as you're directly contacting the responsive servers, no server can fully log the exact paths you're going, as e.g. the Google DNS servers will only be asked if you want to visit a Google website, but not if you visit the website of your favorite newspaper, etc.    Drawback: Traversing the path may be slow, especially for the first time you visit a website - while the bigger DNS providers always have answers for commonly used domains in their cache, you will have to transverse the path if you visit a page for the first time time. A first request to a formerly unknown TLD may take up to a second (or even more if you're also using DNSSEC). Subsequent requests to domains under the same TLD usually complete in   0.1s .\nFortunately, both your Pi-hole as well as your recursive server will be configured for efficient caching to minimize the number of queries that will actually have to be performed.", 
            "title": "What does this guide provide?"
        }, 
        {
            "location": "/guides/unbound/#setting-up-pi-hole-as-a-recursive-dns-server-solution", 
            "text": "We will use  unbound , a secure open source recursive DNS server primarily developed by NLnet Labs, VeriSign Inc., Nominet, and Kirei.\nThe first thing you need to do is to install the recursive DNS resolver: sudo apt install unbound  Optional: Download the list of primary root servers (serving the domain  . ). Unbound ships its own list but we can also download the most recent list and update it whenever we think it is a good idea. Note: there is no point in doing it more often then every 6 months. wget -O root.hints https://www.internic.net/domain/named.root \nsudo mv root.hints /var/lib/unbound/", 
            "title": "Setting up Pi-hole as a recursive DNS server solution"
        }, 
        {
            "location": "/guides/unbound/#configure-unbound", 
            "text": "Highlights:\n- Listen only for queries from the local Pi-hole installation (on port 5353)\n- Listen for both UDP and TCP requests\n- Verify DNSSEC signatures, discarding BOGUS domains\n- Apply a few security and privacy tricks  /etc/unbound/unbound.conf.d/pi-hole.conf : server: \n     verbosity: 1 \n     port: 5353 \n     do-ip4: yes \n     do-udp: yes \n     do-tcp: yes \n\n     # May be set to yes if you have IPv6 connectivity \n     do-ip6: no \n\n     # Use this only when you downloaded the list of primary root servers! \n     root-hints:  /var/lib/unbound/root.hints \n\n     # Trust glue only if it is within the servers authority \n     harden-glue: yes \n\n     # Require DNSSEC data for trust-anchored zones, if such data is absent, the zone becomes BOGUS \n     harden-dnssec-stripped: yes \n\n     # Don t use Capitalization randomization as it known to cause DNSSEC issues sometimes \n     # see https://discourse.pi-hole.net/t/unbound-stubby-or-dnscrypt-proxy/9378 for further details \n     use-caps-for-id: no \n\n     # Reduce EDNS reassembly buffer size. \n     # Suggested by the unbound man page to reduce fragmentation reassembly problems \n     edns-buffer-size: 1472 \n\n     # TTL bounds for cache \n     cache-min-ttl: 3600 \n     cache-max-ttl: 86400 \n\n     # Perform prefetching of close to expired message cache entries \n     # This only applies to domains that have been frequently queried \n     prefetch: yes \n\n     # One thread should be sufficient, can be increased on beefy machines \n     num-threads: 1 \n\n     # Ensure kernel buffer is large enough to not loose messages in traffic spikes \n     so-rcvbuf: 1m \n\n     # Ensure privacy of local IP ranges \n     private-address: 192.168.0.0/16 \n     private-address: 172.16.0.0/12 \n     private-address: 10.0.0.0/8   Start your local recursive server and test that it's operational: sudo   service   unbound   start  dig   pi - hole . net   @127.0.0.1   - p   5353  \nThe first query may be quite slow, but subsequent queries, also to other domains under the same TLD, should be fairly quick.", 
            "title": "Configure unbound"
        }, 
        {
            "location": "/guides/unbound/#test-validation", 
            "text": "You can test DNSSEC validation using dig   sigfail . verteiltesysteme . net   @127.0.0.1   - p   5353  dig   sigok . verteiltesysteme . net   @127.0.0.1   - p   5353  \nThe first command should give a status report of  SERVFAIL  and no IP address. The second should give  NOERROR  plus an IP address.", 
            "title": "Test validation"
        }, 
        {
            "location": "/guides/unbound/#configure-pi-hole", 
            "text": "Finally, configure Pi-hole to use your recursive DNS server:   (don't forget to hit Return or click on  Save )", 
            "title": "Configure Pi-hole"
        }, 
        {
            "location": "/guides/dns-over-https/", 
            "text": "Why use DNS-Over-HTTPS?\n\n\nDNS-Over-HTTPS is a protocol for performing DNS lookups via the same protocol you use to browse the web securely: \nHTTPS\n.\n\n\nWith standard DNS, requests are sent in plain-text, with no method to detect tampering or misbehaviour. This means that not only can a malicous actor look at all the DNS requests you are making (and therefore what websites you are visiting), they can also tamper with the response and redirect your device to resources in their control (such as a fake login page for internet banking).\n\n\nDNS-Over-HTTPS prevents this by using standard HTTPS requests to retrieve DNS information. This means that the connection from the device to the DNS server is secure and can not easily be snooped, monitored, tampered with or blocked.\nIt is worth noting however, that the upstream DNS-Over-HTTPS provider will still have this ability.\n\n\nConfiguring DNS-Over-HTTPS\n\n\nAlong with releasing their DNS service \n1.1.1.1\n, Cloudflare implemented DNS-Over-HTTPS proxy functionality in to one of their tools: \ncloudflared\n.\n\n\nIn the following sections we will be covering how to install and configure this tool on \nPi-hole\n.\n\n\nInstalling \ncloudflared\n\n\nThe installation is fairly straightforward, however be aware of what architecture you are installing on (\namd64\n or \narm\n).\n\n\nAMD64 architecture (most devices)\n\n\nDownload the installer package, then use \napt-get\n to install the package along with any dependencies. Proceed to run the binary with the \n-v\n flag to check it is all working.\n\n\nwget https://bin.equinox.io/c/VdrWdbjqyF/cloudflared-stable-linux-amd64.deb\nsudo apt-get install ./cloudflared-stable-linux-amd64.deb\ncloudflared -v\n\n\n\n\nARM architecture (Raspberry Pi)\n\n\nHere we are downloading the precompiled binary and copying it to the \n/usr/local/bin/\n directory to allow execution by the cloudflared user. Proceed to run the binary with the \n-v\n flag to check it is all working.\n\n\nwget https://bin.equinox.io/c/VdrWdbjqyF/cloudflared-stable-linux-arm.tgz\ntar -xvzf cloudflared-stable-linux-arm.tgz\ncp ./cloudflared /usr/local/bin\nchmod +x /usr/local/bin/cloudflared\ncloudflared -v\n\n\n\n\nConfiguring \ncloudflared\n to run on startup\n\n\nCreate a cloudflared user to run the daemon.\n\n\nsudo useradd -s /usr/sbin/nologin -r -M cloudflared\n\n\n\n\nProceed to create a configuration file for \ncloudflared\n by copying the following in to \n/etc/default/cloudflared\n. This file contains the command-line options that get passed to cloudflared on startup.\n\n\n# Commandline args for cloudflared\nCLOUDFLARED_OPTS=--port 5053 --upstream https://1.1.1.1/dns-query\n\n\n\n\nUpdate the permissions for the configuration file and \ncloudflared\n binary to allow access for the cloudflared user\n\n\nsudo chown cloudflared:cloudflared /etc/default/cloudflared\nsudo chown cloudflared:cloudflared /usr/local/bin/cloudflared\n\n\n\n\nThen create the \nsystemd\n script by copying the following in to \n/lib/systemd/system/cloudflared.service\n. This will control the running of the service and allow it to run on startup.\n\n\n[Unit]\n\n\nDescription\n=\ncloudflared DNS over HTTPS proxy\n\n\nAfter\n=\nsyslog.target network-online.target\n\n\n\n[Service]\n\n\nType\n=\nsimple\n\n\nUser\n=\ncloudflared\n\n\nEnvironmentFile\n=\n/etc/default/cloudflared\n\n\nExecStart\n=\n/usr/local/bin/cloudflared proxy-dns $CLOUDFLARED_OPTS\n\n\nRestart\n=\non-failure\n\n\nRestartSec\n=\n10\n\n\nKillMode\n=\nprocess\n\n\n\n[Install]\n\n\nWantedBy\n=\nmulti-user.target\n\n\n\n\n\nEnable the \nsystemd\n service to run on startup, then start the service and check its status.\n\nsudo systemctl enable cloudflared\nsudo systemctl start cloudflared\nsudo systemctl status cloudflared\n\n\n\nNow test that it is working! Run the following \ndig\n command, a response should be returned similar to the one below\n\n\ndig\n \n@127.0.0.1\n \n-\np\n \n5053\n \ngoogle\n.\ncom\n\n\n\n\n;\n \n \nDiG\n \n9.10.3\n-\nP4\n-\nUbuntu\n \n \n@127.0.0.1\n \n-\np\n \n5053\n \ngoogle\n.\ncom\n\n\n;\n \n(\n1\n \nserver\n \nfound\n)\n\n\n;;\n \nglobal\n \noptions\n:\n \n+\ncmd\n\n\n;;\n \nGot\n \nanswer\n:\n\n\n;;\n \n-\nHEADER\n-\n \nopcode\n:\n \nQUERY\n,\n \nstatus\n:\n \nNOERROR\n,\n \nid\n:\n \n65181\n\n\n;;\n \nflags\n:\n \nqr\n \nrd\n \nra\n;\n \nQUERY\n:\n \n1\n,\n \nANSWER\n:\n \n1\n,\n \nAUTHORITY\n:\n \n0\n,\n \nADDITIONAL\n:\n \n1\n\n\n\n;;\n \nOPT\n \nPSEUDOSECTION\n:\n\n\n;\n \nEDNS\n:\n \nversion\n:\n \n0\n,\n \nflags\n:;\n \nudp\n:\n \n1536\n\n\n;;\n \nQUESTION\n \nSECTION\n:\n\n\n;\ngoogle\n.\ncom\n.\n            \nIN\n  \nA\n\n\n\n;;\n \nANSWER\n \nSECTION\n:\n\n\ngoogle\n.\ncom\n.\n     \n299\n \nIN\n  \nA\n   \n243.65.127.221\n\n\n\n;;\n \nQuery\n \ntime\n:\n \n3\n \nmsec\n\n\n;;\n \nSERVER\n:\n \n127.0.0.1\n#\n5053\n(\n127.0.0.1\n)\n\n\n;;\n \nMSG\n \nSIZE\n  \nrcvd\n:\n \n65\n\n\n\n\n\nConfiguring Pi-hole\n\n\nFinally, configure Pi-hole to use the local \ncloudflared\n service as the upstream DNS server:\n\n\n\n\n(don't forget to hit Return or click on \nSave\n)\n\n\n\n\n\n\n\n\n\n\nBased on \nthis guide by Ben Dews | bendews.com", 
            "title": "Configuring DNS-Over-HTTPS on Pi-hole"
        }, 
        {
            "location": "/guides/dns-over-https/#why-use-dns-over-https", 
            "text": "DNS-Over-HTTPS is a protocol for performing DNS lookups via the same protocol you use to browse the web securely:  HTTPS .  With standard DNS, requests are sent in plain-text, with no method to detect tampering or misbehaviour. This means that not only can a malicous actor look at all the DNS requests you are making (and therefore what websites you are visiting), they can also tamper with the response and redirect your device to resources in their control (such as a fake login page for internet banking).  DNS-Over-HTTPS prevents this by using standard HTTPS requests to retrieve DNS information. This means that the connection from the device to the DNS server is secure and can not easily be snooped, monitored, tampered with or blocked.\nIt is worth noting however, that the upstream DNS-Over-HTTPS provider will still have this ability.", 
            "title": "Why use DNS-Over-HTTPS?"
        }, 
        {
            "location": "/guides/dns-over-https/#configuring-dns-over-https", 
            "text": "Along with releasing their DNS service  1.1.1.1 , Cloudflare implemented DNS-Over-HTTPS proxy functionality in to one of their tools:  cloudflared .  In the following sections we will be covering how to install and configure this tool on  Pi-hole .", 
            "title": "Configuring DNS-Over-HTTPS"
        }, 
        {
            "location": "/guides/dns-over-https/#installing-cloudflared", 
            "text": "The installation is fairly straightforward, however be aware of what architecture you are installing on ( amd64  or  arm ).", 
            "title": "Installing cloudflared"
        }, 
        {
            "location": "/guides/dns-over-https/#amd64-architecture-most-devices", 
            "text": "Download the installer package, then use  apt-get  to install the package along with any dependencies. Proceed to run the binary with the  -v  flag to check it is all working.  wget https://bin.equinox.io/c/VdrWdbjqyF/cloudflared-stable-linux-amd64.deb\nsudo apt-get install ./cloudflared-stable-linux-amd64.deb\ncloudflared -v", 
            "title": "AMD64 architecture (most devices)"
        }, 
        {
            "location": "/guides/dns-over-https/#arm-architecture-raspberry-pi", 
            "text": "Here we are downloading the precompiled binary and copying it to the  /usr/local/bin/  directory to allow execution by the cloudflared user. Proceed to run the binary with the  -v  flag to check it is all working.  wget https://bin.equinox.io/c/VdrWdbjqyF/cloudflared-stable-linux-arm.tgz\ntar -xvzf cloudflared-stable-linux-arm.tgz\ncp ./cloudflared /usr/local/bin\nchmod +x /usr/local/bin/cloudflared\ncloudflared -v", 
            "title": "ARM architecture (Raspberry Pi)"
        }, 
        {
            "location": "/guides/dns-over-https/#configuring-cloudflared-to-run-on-startup", 
            "text": "Create a cloudflared user to run the daemon.  sudo useradd -s /usr/sbin/nologin -r -M cloudflared  Proceed to create a configuration file for  cloudflared  by copying the following in to  /etc/default/cloudflared . This file contains the command-line options that get passed to cloudflared on startup.  # Commandline args for cloudflared\nCLOUDFLARED_OPTS=--port 5053 --upstream https://1.1.1.1/dns-query  Update the permissions for the configuration file and  cloudflared  binary to allow access for the cloudflared user  sudo chown cloudflared:cloudflared /etc/default/cloudflared\nsudo chown cloudflared:cloudflared /usr/local/bin/cloudflared  Then create the  systemd  script by copying the following in to  /lib/systemd/system/cloudflared.service . This will control the running of the service and allow it to run on startup.  [Unit]  Description = cloudflared DNS over HTTPS proxy  After = syslog.target network-online.target  [Service]  Type = simple  User = cloudflared  EnvironmentFile = /etc/default/cloudflared  ExecStart = /usr/local/bin/cloudflared proxy-dns $CLOUDFLARED_OPTS  Restart = on-failure  RestartSec = 10  KillMode = process  [Install]  WantedBy = multi-user.target   Enable the  systemd  service to run on startup, then start the service and check its status. sudo systemctl enable cloudflared\nsudo systemctl start cloudflared\nsudo systemctl status cloudflared  Now test that it is working! Run the following  dig  command, a response should be returned similar to the one below  dig   @127.0.0.1   - p   5053   google . com  ;     DiG   9.10.3 - P4 - Ubuntu     @127.0.0.1   - p   5053   google . com  ;   ( 1   server   found )  ;;   global   options :   + cmd  ;;   Got   answer :  ;;   - HEADER -   opcode :   QUERY ,   status :   NOERROR ,   id :   65181  ;;   flags :   qr   rd   ra ;   QUERY :   1 ,   ANSWER :   1 ,   AUTHORITY :   0 ,   ADDITIONAL :   1  ;;   OPT   PSEUDOSECTION :  ;   EDNS :   version :   0 ,   flags :;   udp :   1536  ;;   QUESTION   SECTION :  ; google . com .              IN    A  ;;   ANSWER   SECTION :  google . com .       299   IN    A     243.65.127.221  ;;   Query   time :   3   msec  ;;   SERVER :   127.0.0.1 # 5053 ( 127.0.0.1 )  ;;   MSG   SIZE    rcvd :   65", 
            "title": "Configuring cloudflared to run on startup"
        }, 
        {
            "location": "/guides/dns-over-https/#configuring-pi-hole", 
            "text": "Finally, configure Pi-hole to use the local  cloudflared  service as the upstream DNS server:   (don't forget to hit Return or click on  Save )      Based on  this guide by Ben Dews | bendews.com", 
            "title": "Configuring Pi-hole"
        }, 
        {
            "location": "/guides/vpn/overview/", 
            "text": "This tutorial is tailored for setting up OpenVPN on a cloud-hosted virtual server (such as \nDigital Ocean\n). If you wish to have this working on your home network, you will need to tailor Pi-hole to listen on \neth0\n (or similar), which we explain in \nthis section of the tutorial\n.\n\n\n\n\nHigh-level Overview\n\n\nUsing a VPN is a responsible, respectful, and safe way to access your Pi-hole's capabilities remotely.  Setting up a DNS server has become a simple task with Pi-hole's automated installer, which has resulted in many people knowingly--or unknowingly--creating an open resolver, which aids in DNS Amplification Attacks.\n\n\nWe do not encourage open resolvers but there are always people wanting access to their ad-blocking capabilities outside of their home network, whether it's on their cellular network or on an unsecured wireless network.  This article aims to provide a step-by-step walk-through on setting up a server running Pi-hole and OpenVPN so you can connect to your Pi-hole's DNS from anywhere.  This guide should work for a private server installed on your private network, but it will also work for cloud servers, such as those created on \nDigital Ocean\n.\n\n\nThis tutorial walks you through the installation of Pi-hole combined with an VPN server for secure access from remote clients\n.\n\n\nVia this VPN, you can:\n\n\n\n\nuse the DNS server and full filtering capabilities of your Pi-hole from everywhere around the globe\n\n\naccess your admin interface remotely\n\n\nencrypt your Internet traffic\n\n\n\n\nIf you don't want a full-tunnel, we provide a wiki of how to \nset up your server to exclusively route DNS traffic, but nothing else via the VPN\n.  On another optional page, we describe how to set up Pi-hole + VPN in such a way that it is \nusable both locally (no VPN) and from remote (through VPN)\n, while preserving full functionality.\n\n\nIn the end, you will have access to a VPN that uses Pi-hole for DNS and tunnels some or all of your network traffic\n\n\n\n\nThis manual is partially based on this \nHowTo\n on \nDiscourse\n.", 
            "title": "Overview"
        }, 
        {
            "location": "/guides/vpn/overview/#high-level-overview", 
            "text": "Using a VPN is a responsible, respectful, and safe way to access your Pi-hole's capabilities remotely.  Setting up a DNS server has become a simple task with Pi-hole's automated installer, which has resulted in many people knowingly--or unknowingly--creating an open resolver, which aids in DNS Amplification Attacks.  We do not encourage open resolvers but there are always people wanting access to their ad-blocking capabilities outside of their home network, whether it's on their cellular network or on an unsecured wireless network.  This article aims to provide a step-by-step walk-through on setting up a server running Pi-hole and OpenVPN so you can connect to your Pi-hole's DNS from anywhere.  This guide should work for a private server installed on your private network, but it will also work for cloud servers, such as those created on  Digital Ocean .  This tutorial walks you through the installation of Pi-hole combined with an VPN server for secure access from remote clients .  Via this VPN, you can:   use the DNS server and full filtering capabilities of your Pi-hole from everywhere around the globe  access your admin interface remotely  encrypt your Internet traffic   If you don't want a full-tunnel, we provide a wiki of how to  set up your server to exclusively route DNS traffic, but nothing else via the VPN .  On another optional page, we describe how to set up Pi-hole + VPN in such a way that it is  usable both locally (no VPN) and from remote (through VPN) , while preserving full functionality.  In the end, you will have access to a VPN that uses Pi-hole for DNS and tunnels some or all of your network traffic   This manual is partially based on this  HowTo  on  Discourse .", 
            "title": "High-level Overview"
        }, 
        {
            "location": "/guides/vpn/installation/", 
            "text": "Install an operating system\n\n\nOnce you have your preferred OS up and running.  You may already have a server set up on your network, or you may prefer to make a \nDigital Ocean\n droplet.  In either case, you'll use the quick OpenVPN \"road warrior\" installer.  The cloud-hosted server option is convenient if you don't want to host the hardware at home, but you'll need to take additional steps to secure the server as it's available on the public Internet.  Failure to do so is \nnot only irresponsible, but you also put yourself and others at risk\n.\n\n\nInstall OpenVPN + Pi-hole\n\n\nA note about security\n\n\nFor security purposes, it is recommended that the CA machine should be separate from the machine running OpenVPN. If you lose control of your CA private key, you can no longer trust any certificates from this CA. Anyone with access to this CA private key can sign new certificates without your knowledge, which then can connect to your OpenVPN server without needing to modify anything on the VPN server. Place your CA files on a storage which can be offline as much as possible, only to be activated when you need to get a new certificate for a client or server.\n\n\nThis is less convenient, so many users will simply decide to install Pi-hole and OpenVPN on a single machine, which is what this guide will walkthrough.\n\n\nInstall the OpenVPN server\n\n\nFirst, download the OpenVPN installer; make it executable, and then run it:\n\nwget https://git.io/vpn -O openvpn-install.sh\nchmod 755 openvpn-install.sh\n./openvpn-install.sh\n\n\nEnter your server's IP address and accept all the defaults, unless you require special needs:\n\nWelcome to this quick OpenVPN \nroad warrior\n installer\n\nI need to ask you a few questions before starting the setup\nYou can leave the default options and just press enter if you are ok with them\n\nFirst I need to know the IPv4 address of the network interface you want OpenVPN\nlistening to.\nIP address: 10.8.0.1\n\nWhich protocol do you want for OpenVPN connections?\n   1) UDP (recommended)\n   2) TCP\nProtocol [1-2]: 1\n\nWhat port do you want OpenVPN listening to?\nPort: 1194\n\nWhich DNS do you want to use with the VPN?\n   1) Current system resolvers\n   2) Google\n   3) OpenDNS\n   4) NTT\n   5) Hurricane Electric\n   6) Verisign\nDNS [1-6]: 1\n\nFinally, tell me your name for the client certificate\nPlease, use one word only, no special characters\nClient name: pihole\n\nOkay, that was all I needed. We are ready to setup your OpenVPN server now\nPress any key to continue...\n\n\nLet the installer run...\n\nFinished!\n\nYour client configuration is available at /root/pihole.ovpn\nIf you want to add more clients, you simply need to run this script again!\n\n\n\nInstall Pi-hole\n\n\nNext, install Pi-hole and choose \ntun0\n as the interface and \n10.8.0.1/24\n as the IP address. You can accept the rest of the defaults, or configure Pi-hole to your liking.  The interface selection is the most important step; if you don't choose \ntun0\n (at least to begin with), it will not work properly.\n\n\ncurl -sSL https://install.pi-hole.net | bash", 
            "title": "Installation"
        }, 
        {
            "location": "/guides/vpn/installation/#install-an-operating-system", 
            "text": "Once you have your preferred OS up and running.  You may already have a server set up on your network, or you may prefer to make a  Digital Ocean  droplet.  In either case, you'll use the quick OpenVPN \"road warrior\" installer.  The cloud-hosted server option is convenient if you don't want to host the hardware at home, but you'll need to take additional steps to secure the server as it's available on the public Internet.  Failure to do so is  not only irresponsible, but you also put yourself and others at risk .", 
            "title": "Install an operating system"
        }, 
        {
            "location": "/guides/vpn/installation/#install-openvpn-pi-hole", 
            "text": "", 
            "title": "Install OpenVPN + Pi-hole"
        }, 
        {
            "location": "/guides/vpn/installation/#a-note-about-security", 
            "text": "For security purposes, it is recommended that the CA machine should be separate from the machine running OpenVPN. If you lose control of your CA private key, you can no longer trust any certificates from this CA. Anyone with access to this CA private key can sign new certificates without your knowledge, which then can connect to your OpenVPN server without needing to modify anything on the VPN server. Place your CA files on a storage which can be offline as much as possible, only to be activated when you need to get a new certificate for a client or server.  This is less convenient, so many users will simply decide to install Pi-hole and OpenVPN on a single machine, which is what this guide will walkthrough.", 
            "title": "A note about security"
        }, 
        {
            "location": "/guides/vpn/installation/#install-the-openvpn-server", 
            "text": "First, download the OpenVPN installer; make it executable, and then run it: wget https://git.io/vpn -O openvpn-install.sh\nchmod 755 openvpn-install.sh\n./openvpn-install.sh \nEnter your server's IP address and accept all the defaults, unless you require special needs: Welcome to this quick OpenVPN  road warrior  installer\n\nI need to ask you a few questions before starting the setup\nYou can leave the default options and just press enter if you are ok with them\n\nFirst I need to know the IPv4 address of the network interface you want OpenVPN\nlistening to.\nIP address: 10.8.0.1\n\nWhich protocol do you want for OpenVPN connections?\n   1) UDP (recommended)\n   2) TCP\nProtocol [1-2]: 1\n\nWhat port do you want OpenVPN listening to?\nPort: 1194\n\nWhich DNS do you want to use with the VPN?\n   1) Current system resolvers\n   2) Google\n   3) OpenDNS\n   4) NTT\n   5) Hurricane Electric\n   6) Verisign\nDNS [1-6]: 1\n\nFinally, tell me your name for the client certificate\nPlease, use one word only, no special characters\nClient name: pihole\n\nOkay, that was all I needed. We are ready to setup your OpenVPN server now\nPress any key to continue... \nLet the installer run... Finished!\n\nYour client configuration is available at /root/pihole.ovpn\nIf you want to add more clients, you simply need to run this script again!", 
            "title": "Install the OpenVPN server"
        }, 
        {
            "location": "/guides/vpn/installation/#install-pi-hole", 
            "text": "Next, install Pi-hole and choose  tun0  as the interface and  10.8.0.1/24  as the IP address. You can accept the rest of the defaults, or configure Pi-hole to your liking.  The interface selection is the most important step; if you don't choose  tun0  (at least to begin with), it will not work properly.  curl -sSL https://install.pi-hole.net | bash", 
            "title": "Install Pi-hole"
        }, 
        {
            "location": "/guides/vpn/setup-openvpn-server/", 
            "text": "Change OpenVPN's resolvers\n\n\nFirst, find the IP of your \ntun0\n interface:\n\n\nOn Jessie\n\nifconfig tun0 | grep \ninet addr\n\n\n\nOn Stretch\n\nip a\n\n\n\nEdit the OpenVPN config file:\n\n\nvim /etc/openvpn/server.conf\n\n\n\n\nSet this line to use your Pi-hole's IP address, which you determined from the \nifconfig\n command and comment out or remove the other line (if it exists):\n\n\npush \ndhcp-option DNS 10.8.0.1\n\n#push \ndhcp-option DNS 8.8.8.8\n\n\n\n\n\nThis \npush\n directive is setting a \nDHCP option\n, which tells client's connecting to the VPN that they should use Pi-hole as their primary DNS server.\n\n\nIt's \nsuggested to have Pi-hole be the only resolver\n as it defines the upstream servers.  Setting a non-Pi-hole resolver here \nmay have adverse effects on ad blocking\n but it \ncan\n provide failover connectivity in the case of Pi-hole not working if that is something you are concerned about.\n\n\nRestart OpenVPN to apply the changes\n\n\nDepending on your operating system, one of these commands should work to restart the service.\n\nsystemctl restart openvpn\nservice openvpn restart\n\n\n\nCreate a client config file (\n.ovpn\n)\n\n\nNow that the server is configured, you'll want to connect some clients so you can make use of your Pi-hole wherever you are.  Doing so requires the use of a certificate.  You generate these and the resulting \n.ovpn\n file by running the installer and choosing \n1) Add a new user\n for each client that will connect to the VPN.\n\n\nYou can repeat this process for as many clients as you need.  In this example, we'll \"Add a new user\" by naming the \n.ovpn\n file the same as the client's hostname but you may want to adopt your own naming strategy.\n\n\nRun the OpenVPN installer again\n\n\n./openvpn-install.sh\n\n\n\n\nChoose \n1) Add a new user\n and enter a client name\n\nLooks like OpenVPN is already installed\n\nWhat do you want to do?\n   1) Add a new user\n   2) Revoke an existing user\n   3) Remove OpenVPN\n   4) Exit\nSelect an option [1-4]: 1\n\nTell me a name for the client certificate\nPlease, use one word only, no special characters\nClient name: iphone7\n\n\n\nThis will generate a \n.ovpn\n file, which needs to be copied to your client machine (often times using the OpenVPN app).  This process also generates a few other files found in \n/etc/openvpn/easy-rsa/pki/\n, which make public key authentication possible; you only need to worry about the \n.ovpn\n file, though.", 
            "title": "Setup OpenVPN Server"
        }, 
        {
            "location": "/guides/vpn/setup-openvpn-server/#change-openvpns-resolvers", 
            "text": "First, find the IP of your  tun0  interface:  On Jessie ifconfig tun0 | grep  inet addr  \nOn Stretch ip a  Edit the OpenVPN config file:  vim /etc/openvpn/server.conf  Set this line to use your Pi-hole's IP address, which you determined from the  ifconfig  command and comment out or remove the other line (if it exists):  push  dhcp-option DNS 10.8.0.1 \n#push  dhcp-option DNS 8.8.8.8   This  push  directive is setting a  DHCP option , which tells client's connecting to the VPN that they should use Pi-hole as their primary DNS server.  It's  suggested to have Pi-hole be the only resolver  as it defines the upstream servers.  Setting a non-Pi-hole resolver here  may have adverse effects on ad blocking  but it  can  provide failover connectivity in the case of Pi-hole not working if that is something you are concerned about.", 
            "title": "Change OpenVPN's resolvers"
        }, 
        {
            "location": "/guides/vpn/setup-openvpn-server/#restart-openvpn-to-apply-the-changes", 
            "text": "Depending on your operating system, one of these commands should work to restart the service. systemctl restart openvpn\nservice openvpn restart", 
            "title": "Restart OpenVPN to apply the changes"
        }, 
        {
            "location": "/guides/vpn/setup-openvpn-server/#create-a-client-config-file-ovpn", 
            "text": "Now that the server is configured, you'll want to connect some clients so you can make use of your Pi-hole wherever you are.  Doing so requires the use of a certificate.  You generate these and the resulting  .ovpn  file by running the installer and choosing  1) Add a new user  for each client that will connect to the VPN.  You can repeat this process for as many clients as you need.  In this example, we'll \"Add a new user\" by naming the  .ovpn  file the same as the client's hostname but you may want to adopt your own naming strategy.  Run the OpenVPN installer again  ./openvpn-install.sh  Choose  1) Add a new user  and enter a client name Looks like OpenVPN is already installed\n\nWhat do you want to do?\n   1) Add a new user\n   2) Revoke an existing user\n   3) Remove OpenVPN\n   4) Exit\nSelect an option [1-4]: 1\n\nTell me a name for the client certificate\nPlease, use one word only, no special characters\nClient name: iphone7  This will generate a  .ovpn  file, which needs to be copied to your client machine (often times using the OpenVPN app).  This process also generates a few other files found in  /etc/openvpn/easy-rsa/pki/ , which make public key authentication possible; you only need to worry about the  .ovpn  file, though.", 
            "title": "Create a client config file (.ovpn)"
        }, 
        {
            "location": "/guides/vpn/firewall/", 
            "text": "(optional) Secure the server with firewall rules (\niptables\n)\n\n\nThis step is recommended if you are running your server in the cloud, such as a droplet made on \nDigital Ocean\n.  If this is the case, you need to secure the server for your safety as well as others to prevent aiding in DDoS attacks.\n\n\nIn addition to the risk of being an open resolver, your Web interface is also open to the world increasing the risk.  So you will want to prevent ports 53 and 80, respectively, from being accessible from the public Internet.\n\n\nIt's recommended that you \nclear out your entire firewall\n so you have full control over it's setup.  You have two options for setting up your firewall with your VPN.\n\n\nOption 1: Allow everything from within your VPN\n\n\nEnter this command, which will allow all traffic through the VPN \ntun0\n interface.\n\n\niptables -I INPUT -i tun0 -j ACCEPT\n\n\n\n\nOption 2: Explicitly allow what can be accessed within the VPN\n\n\nThese commands will allow DNS and HTTP needed for name resolution (using Pi-hole as a resolver) and accessing the Web interface, respectively.\n\n\niptables -A INPUT -i tun0 -p tcp --destination-port 53 -j ACCEPT\niptables -A INPUT -i tun0 -p udp --destination-port 53 -j ACCEPT\niptables -A INPUT -i tun0 -p tcp --destination-port 80 -j ACCEPT\n\n\n\n\nYou will also want to enable SSH and VPN access from anywhere.\n\n\niptables -A INPUT -p tcp --destination-port 22 -j ACCEPT\niptables -A INPUT -p tcp --destination-port 1194 -j ACCEPT\niptables -A INPUT -p udp --destination-port 1194 -j ACCEPT\n\n\n\n\nThe next crucial setting is to explicitly allow TCP/IP to do \"three way handshakes\":\n\n\niptables -I INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n\n\n\n\nAlso, we want to allow any loopback traffic, i.e. the server is allowed to talk to itself without any limitations using 127.0.0.0/8:\n\n\niptables -I INPUT -i lo -j ACCEPT\n\n\n\n\nFinally, reject access from anywhere else (i.e. if no rule has matched up to this point):\n\n\niptables -P INPUT DROP\n\n\n\n\nBlocking HTTPS advertisement assets\n\n\nSince you're \n:head-desk:\ning with \niptables\n, you can also use this opportunity to block HTTPS advertisements to \nimprove blocking ads that are loaded via HTTPS\n and also deal with QUIC.\n\n\n\n\nWhy doesn't Pi-hole just use a certificate to prevent this?  The answer is \nhere\n.\n\n\n\n\niptables -A INPUT -p udp --dport 80 -j REJECT --reject-with icmp-port-unreachable\niptables -A INPUT -p tcp --dport 443 -j REJECT --reject-with tcp-reset\niptables -A INPUT -p udp --dport 443 -j REJECT --reject-with icmp-port-unreachable\n\n\n\n\nDepending on the systems you have connecting, you may benefit from appending \n--reject-with tcp-reset\n to the command above.  If you still get slow load times of HTTPS assets, the above may help.\n\n\nIf you want to test how your Pi-hole behaves with blocking HTTP vs. HTTPS assets, use \nthis page\n.\n\n\nIPv6 \niptables\n\n\nIf your server is reachable via IPv6, you'll need to run the same commands but using \nip6tables\n:\n\n\nip6tables -A INPUT -i tun0 -p tcp --destination-port 53 -j ACCEPT\nip6tables -A INPUT -i tun0 -p udp --destination-port 53 -j ACCEPT\nip6tables -A INPUT -i tun0 -p tcp --destination-port 80 -j ACCEPT\nip6tables -A INPUT -p tcp --destination-port 22 -j ACCEPT\nip6tables -A INPUT -p tcp --destination-port 1194 -j ACCEPT\nip6tables -A INPUT -p udp --destination-port 1194 -j ACCEPT\nip6tables -I INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\nip6tables -I INPUT -i lo -j ACCEPT\nip6tables -A INPUT -p udp --dport 80 -j REJECT --reject-with icmp6-port-unreachable\nip6tables -A INPUT -p tcp --dport 443 -j REJECT --reject-with tcp-reset\nip6tables -A INPUT -p udp --dport 443 -j REJECT --reject-with icmp6-port-unreachable\nip6tables -P INPUT DROP\n\n\nView the rules you just created\n\n\niptables -L --line-numbers\n\n\n\n\nand they should look something like this:\n\n\nChain INPUT (policy DROP)\nnum  target     prot opt source               destination         \n1    ACCEPT     all  --  anywhere             anywhere            \n2    ACCEPT     all  --  anywhere             anywhere             state RELATED,ESTABLISHED\n3    ACCEPT     all  --  anywhere             anywhere            \n4    ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:domain\n5    ACCEPT     udp  --  anywhere             anywhere             udp dpt:domain\n6    ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:http\n7    ACCEPT     udp  --  anywhere             anywhere             udp dpt:80\n8    ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:ssh\n9    ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:openvpn\n10   ACCEPT     udp  --  anywhere             anywhere             udp dpt:openvpn\n11   ACCEPT     tcp  --  10.8.0.0/24          anywhere             tcp dpt:domain\n12   ACCEPT     udp  --  10.8.0.0/24          anywhere             udp dpt:domain\n13   ACCEPT     tcp  --  10.8.0.0/24          anywhere             tcp dpt:http\n14   ACCEPT     udp  --  10.8.0.0/24          anywhere             udp dpt:80\n15   ACCEPT     tcp  --  10.8.0.0/24          anywhere             tcp dpt:domain\n16   ACCEPT     tcp  --  10.8.0.0/24          anywhere             tcp dpt:http\n17   ACCEPT     udp  --  10.8.0.0/24          anywhere             udp dpt:domain\n18   ACCEPT     udp  --  10.8.0.0/24          anywhere             udp dpt:80\n19   REJECT     tcp  --  anywhere             anywhere             tcp dpt:https reject-with icmp-port-unreachable\n\nChain FORWARD (policy ACCEPT)\nnum  target     prot opt source               destination         \n\nChain OUTPUT (policy ACCEPT)\nnum  target     prot opt source               destination  \n\n\n\n\nSimilarly, \nip6tables -L --line-numbers\n should look like this:\n\n\nChain INPUT (policy DROP)\nnum  target     prot opt source               destination         \n1    ACCEPT     all      anywhere             anywhere            \n2    ACCEPT     all      anywhere             anywhere             state RELATED,ESTABLISHED\n3    ACCEPT     tcp      anywhere             anywhere             tcp dpt:domain\n4    ACCEPT     udp      anywhere             anywhere             udp dpt:domain\n5    ACCEPT     tcp      anywhere             anywhere             tcp dpt:http\n6    ACCEPT     udp      anywhere             anywhere             udp dpt:80\n7    ACCEPT     tcp      anywhere             anywhere             tcp dpt:ssh\n8    ACCEPT     tcp      anywhere             anywhere             tcp dpt:openvpn\n9    ACCEPT     udp      anywhere             anywhere             udp dpt:openvpn\n10   REJECT     tcp      anywhere             anywhere             tcp dpt:https reject-with icmp6-port-unreachable\n\nChain FORWARD (policy ACCEPT)\nnum  target     prot opt source               destination         \n\nChain OUTPUT (policy ACCEPT)\nnum  target     prot opt source               destination  \n\n\n\n\nVerify the rules are working\n\n\nConnect to the VPN as a client and verify you can resolve DNS names as well as access the Pi-hole Web interface.  These settings are stored in memory until you save them.  If it's not working, you can restart your server to start from scratch.  Alternatively, you could also go through and delete lines with \niptables -D INPUT \nSOME LINE NUMBER\n\n\nSave your \niptables\n\n\nIf things look good, you may want to save your rules so you can revert to them if you ever make changes to the firewall.  Save them with these commands:\n\n\niptables-save \n /etc/pihole/rules.v4\nip6tables-save \n /etc/pihole/rules.v6\n\n\n\n\nSimilarly, you can restore these rules:\n\n\niptables-restore \n /etc/pihole/rules.v4\nip6tables-restore \n /etc/pihole/rules.v6", 
            "title": "Firewall Configuration"
        }, 
        {
            "location": "/guides/vpn/firewall/#optional-secure-the-server-with-firewall-rules-iptables", 
            "text": "This step is recommended if you are running your server in the cloud, such as a droplet made on  Digital Ocean .  If this is the case, you need to secure the server for your safety as well as others to prevent aiding in DDoS attacks.  In addition to the risk of being an open resolver, your Web interface is also open to the world increasing the risk.  So you will want to prevent ports 53 and 80, respectively, from being accessible from the public Internet.  It's recommended that you  clear out your entire firewall  so you have full control over it's setup.  You have two options for setting up your firewall with your VPN.", 
            "title": "(optional) Secure the server with firewall rules (iptables)"
        }, 
        {
            "location": "/guides/vpn/firewall/#option-1-allow-everything-from-within-your-vpn", 
            "text": "Enter this command, which will allow all traffic through the VPN  tun0  interface.  iptables -I INPUT -i tun0 -j ACCEPT", 
            "title": "Option 1: Allow everything from within your VPN"
        }, 
        {
            "location": "/guides/vpn/firewall/#option-2-explicitly-allow-what-can-be-accessed-within-the-vpn", 
            "text": "These commands will allow DNS and HTTP needed for name resolution (using Pi-hole as a resolver) and accessing the Web interface, respectively.  iptables -A INPUT -i tun0 -p tcp --destination-port 53 -j ACCEPT\niptables -A INPUT -i tun0 -p udp --destination-port 53 -j ACCEPT\niptables -A INPUT -i tun0 -p tcp --destination-port 80 -j ACCEPT  You will also want to enable SSH and VPN access from anywhere.  iptables -A INPUT -p tcp --destination-port 22 -j ACCEPT\niptables -A INPUT -p tcp --destination-port 1194 -j ACCEPT\niptables -A INPUT -p udp --destination-port 1194 -j ACCEPT  The next crucial setting is to explicitly allow TCP/IP to do \"three way handshakes\":  iptables -I INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT  Also, we want to allow any loopback traffic, i.e. the server is allowed to talk to itself without any limitations using 127.0.0.0/8:  iptables -I INPUT -i lo -j ACCEPT  Finally, reject access from anywhere else (i.e. if no rule has matched up to this point):  iptables -P INPUT DROP", 
            "title": "Option 2: Explicitly allow what can be accessed within the VPN"
        }, 
        {
            "location": "/guides/vpn/firewall/#blocking-https-advertisement-assets", 
            "text": "Since you're  :head-desk: ing with  iptables , you can also use this opportunity to block HTTPS advertisements to  improve blocking ads that are loaded via HTTPS  and also deal with QUIC.   Why doesn't Pi-hole just use a certificate to prevent this?  The answer is  here .   iptables -A INPUT -p udp --dport 80 -j REJECT --reject-with icmp-port-unreachable\niptables -A INPUT -p tcp --dport 443 -j REJECT --reject-with tcp-reset\niptables -A INPUT -p udp --dport 443 -j REJECT --reject-with icmp-port-unreachable  Depending on the systems you have connecting, you may benefit from appending  --reject-with tcp-reset  to the command above.  If you still get slow load times of HTTPS assets, the above may help.  If you want to test how your Pi-hole behaves with blocking HTTP vs. HTTPS assets, use  this page .", 
            "title": "Blocking HTTPS advertisement assets"
        }, 
        {
            "location": "/guides/vpn/firewall/#ipv6-iptables", 
            "text": "If your server is reachable via IPv6, you'll need to run the same commands but using  ip6tables :  ip6tables -A INPUT -i tun0 -p tcp --destination-port 53 -j ACCEPT\nip6tables -A INPUT -i tun0 -p udp --destination-port 53 -j ACCEPT\nip6tables -A INPUT -i tun0 -p tcp --destination-port 80 -j ACCEPT\nip6tables -A INPUT -p tcp --destination-port 22 -j ACCEPT\nip6tables -A INPUT -p tcp --destination-port 1194 -j ACCEPT\nip6tables -A INPUT -p udp --destination-port 1194 -j ACCEPT\nip6tables -I INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\nip6tables -I INPUT -i lo -j ACCEPT\nip6tables -A INPUT -p udp --dport 80 -j REJECT --reject-with icmp6-port-unreachable\nip6tables -A INPUT -p tcp --dport 443 -j REJECT --reject-with tcp-reset\nip6tables -A INPUT -p udp --dport 443 -j REJECT --reject-with icmp6-port-unreachable\nip6tables -P INPUT DROP \nView the rules you just created  iptables -L --line-numbers  and they should look something like this:  Chain INPUT (policy DROP)\nnum  target     prot opt source               destination         \n1    ACCEPT     all  --  anywhere             anywhere            \n2    ACCEPT     all  --  anywhere             anywhere             state RELATED,ESTABLISHED\n3    ACCEPT     all  --  anywhere             anywhere            \n4    ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:domain\n5    ACCEPT     udp  --  anywhere             anywhere             udp dpt:domain\n6    ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:http\n7    ACCEPT     udp  --  anywhere             anywhere             udp dpt:80\n8    ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:ssh\n9    ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:openvpn\n10   ACCEPT     udp  --  anywhere             anywhere             udp dpt:openvpn\n11   ACCEPT     tcp  --  10.8.0.0/24          anywhere             tcp dpt:domain\n12   ACCEPT     udp  --  10.8.0.0/24          anywhere             udp dpt:domain\n13   ACCEPT     tcp  --  10.8.0.0/24          anywhere             tcp dpt:http\n14   ACCEPT     udp  --  10.8.0.0/24          anywhere             udp dpt:80\n15   ACCEPT     tcp  --  10.8.0.0/24          anywhere             tcp dpt:domain\n16   ACCEPT     tcp  --  10.8.0.0/24          anywhere             tcp dpt:http\n17   ACCEPT     udp  --  10.8.0.0/24          anywhere             udp dpt:domain\n18   ACCEPT     udp  --  10.8.0.0/24          anywhere             udp dpt:80\n19   REJECT     tcp  --  anywhere             anywhere             tcp dpt:https reject-with icmp-port-unreachable\n\nChain FORWARD (policy ACCEPT)\nnum  target     prot opt source               destination         \n\nChain OUTPUT (policy ACCEPT)\nnum  target     prot opt source               destination    Similarly,  ip6tables -L --line-numbers  should look like this:  Chain INPUT (policy DROP)\nnum  target     prot opt source               destination         \n1    ACCEPT     all      anywhere             anywhere            \n2    ACCEPT     all      anywhere             anywhere             state RELATED,ESTABLISHED\n3    ACCEPT     tcp      anywhere             anywhere             tcp dpt:domain\n4    ACCEPT     udp      anywhere             anywhere             udp dpt:domain\n5    ACCEPT     tcp      anywhere             anywhere             tcp dpt:http\n6    ACCEPT     udp      anywhere             anywhere             udp dpt:80\n7    ACCEPT     tcp      anywhere             anywhere             tcp dpt:ssh\n8    ACCEPT     tcp      anywhere             anywhere             tcp dpt:openvpn\n9    ACCEPT     udp      anywhere             anywhere             udp dpt:openvpn\n10   REJECT     tcp      anywhere             anywhere             tcp dpt:https reject-with icmp6-port-unreachable\n\nChain FORWARD (policy ACCEPT)\nnum  target     prot opt source               destination         \n\nChain OUTPUT (policy ACCEPT)\nnum  target     prot opt source               destination", 
            "title": "IPv6 iptables"
        }, 
        {
            "location": "/guides/vpn/firewall/#verify-the-rules-are-working", 
            "text": "Connect to the VPN as a client and verify you can resolve DNS names as well as access the Pi-hole Web interface.  These settings are stored in memory until you save them.  If it's not working, you can restart your server to start from scratch.  Alternatively, you could also go through and delete lines with  iptables -D INPUT  SOME LINE NUMBER", 
            "title": "Verify the rules are working"
        }, 
        {
            "location": "/guides/vpn/firewall/#save-your-iptables", 
            "text": "If things look good, you may want to save your rules so you can revert to them if you ever make changes to the firewall.  Save them with these commands:  iptables-save   /etc/pihole/rules.v4\nip6tables-save   /etc/pihole/rules.v6  Similarly, you can restore these rules:", 
            "title": "Save your iptables"
        }, 
        {
            "location": "/guides/vpn/firewall/#iptables-restore-etcpiholerulesv4-ip6tables-restore-etcpiholerulesv6", 
            "text": "", 
            "title": "iptables-restore &lt; /etc/pihole/rules.v4"
        }, 
        {
            "location": "/guides/vpn/clients/", 
            "text": "Create a client config file (\n.ovpn\n)\n\n\nNow that the server is configured, you'll want to connect some clients so you can make use of your Pi-hole wherever you are.  Doing so requires the use of a certificate.  You generate these and the resulting \n.ovpn\n file by running the installer and choosing \n1) Add a new user\n for each client that will connect to the VPN.  \n\n\nYou can repeat this process for as many clients as you need.  In this example, we'll \"Add a new user\" by naming the \n.ovpn\n file the same as the client's hostname but you may want to adopt your own naming strategy.\n\n\nRun the OpenVPN installer again\n\n\n./openvpn-install.sh\n\n\n\n\nChoose \n1) Add a new user\n and enter a client name\n\nLooks like OpenVPN is already installed\n\nWhat do you want to do?\n   1) Add a new user\n   2) Revoke an existing user\n   3) Remove OpenVPN\n   4) Exit\nSelect an option [1-4]: 1\n\nTell me a name for the client certificate\nPlease, use one word only, no special characters\nClient name: iphone7\n\n\n\nThis will generate a \n.ovpn\n file, which needs to be copied to your client machine (often times using the OpenVPN app).  This process also generates a few other files found in \n/etc/openvpn/easy-rsa/pki/\n, which make public key authentication possible; you only need to worry about the \n.ovpn\n file, though.\n\n\nConnect a client using the \n.ovpn\n file\n\n\nThe OpenVPN documentation has some decent \nguides on connecting desktop clients for Mac, Windows, and Linux\n, so we'll instead explain how to connect a mobile device, since that provides the most usefulness in today's world--\nconnecting to your ad-blocking VPN via a mobile device\n.  We'll go through two examples:\n\n\n\n\nconnect an iPhone using the OpenVPN Connect mobile app (see \nhere\n for Android)\n\n\nconnect a Linux machine\n\n\n\n\niOS\n\n\nFirst make sure the OpenVPN connect app is installed on your phone or mobile device.\n\n\nImport the \n.ovpn\n file into iOS.  There are several ways to do this, but be careful about transferring it over an insecure medium.\n\n\n\n\nAirdrop the file from another device\n\n\nStore the file in a cloud app and open it ion your device\n\n\nMessage the file to yourself (not recommended)\n\n\nEmail the file to yourself (not recommended)\n\n\n\n\n\n\nWARNING\n Anyone who gets his hands on this configuration/certificate file can obtain full access to your VPN. Make sure that you use only trusted paths for transferring the file (e.g. never send it via an un-encrypted channel, e.g. email or FTP). Best strategy is to use an USB thumb drive to avoid any network transport at all (when possible). Make sure to delete the certificate on the USB drive afterwards.\n\n\nNOTICE\n If one of your certificates has been compromised, remove it using option 2 when you run the installer and generate a new certificate. This will effectively lock out anyone who might have gotten access to the certificate.\n\n\n\n\nOnce you get it on your device, you can open the file in the OpenVPN app.  \n\n\nClick the green plus to add the profile to your phone.\n\n\nYou can connect from within the app or you can connect from the Settings app once you grant it access to do so.\n\n\nLinux\n\n\nWe'll demonstrate the procedure here for Ubuntu Linux (which trivially extends to Linux Mint, etc.)\n\n\n\n\n\n\nInstall the necessary network-manager plugins\n\nsudo apt-get install network-manager-openvpn network-manager-openvpn-gnome\nsudo service network-manager restart\n\n\n\n\n\n\n\nSecurely copy the necessary certificates from your OpenVPN server to your client (e.g. using \nsftp\n). They are located in \n/etc/openvpn/easy-rsa/pki\n\n\n\n\n\n\nYou will need:\n\n\n\n\nUser Certificate: \n/etc/openvpn/easy-rsa/pki/issued/client.crt\n\n\nCA Certificate: \n/etc/openvpn/easy-rsa/pki/ca.crt\n\n\nPrivate Key: \n/etc/openvpn/easy-rsa/pki/private/client.key\n\n\nPrivate Key Password: Depending on your settings (might even be empty)\n\n\nTA Key: \n/etc/openvpn/ta.key\n\n\n\n\nFurther details can be found in the screenshots provided below:\n\n\n\n\n\n\n\n\n\n\nYour whole network traffic will now securely be transferred to your Pi-hole.\n\n\n\nWindows\n\n\nYou will have to install additional software. See \nhttps://openvpn.net/index.php/open-source/downloads.html", 
            "title": "General"
        }, 
        {
            "location": "/guides/vpn/clients/#create-a-client-config-file-ovpn", 
            "text": "Now that the server is configured, you'll want to connect some clients so you can make use of your Pi-hole wherever you are.  Doing so requires the use of a certificate.  You generate these and the resulting  .ovpn  file by running the installer and choosing  1) Add a new user  for each client that will connect to the VPN.    You can repeat this process for as many clients as you need.  In this example, we'll \"Add a new user\" by naming the  .ovpn  file the same as the client's hostname but you may want to adopt your own naming strategy.  Run the OpenVPN installer again  ./openvpn-install.sh  Choose  1) Add a new user  and enter a client name Looks like OpenVPN is already installed\n\nWhat do you want to do?\n   1) Add a new user\n   2) Revoke an existing user\n   3) Remove OpenVPN\n   4) Exit\nSelect an option [1-4]: 1\n\nTell me a name for the client certificate\nPlease, use one word only, no special characters\nClient name: iphone7  This will generate a  .ovpn  file, which needs to be copied to your client machine (often times using the OpenVPN app).  This process also generates a few other files found in  /etc/openvpn/easy-rsa/pki/ , which make public key authentication possible; you only need to worry about the  .ovpn  file, though.", 
            "title": "Create a client config file (.ovpn)"
        }, 
        {
            "location": "/guides/vpn/clients/#connect-a-client-using-the-ovpn-file", 
            "text": "The OpenVPN documentation has some decent  guides on connecting desktop clients for Mac, Windows, and Linux , so we'll instead explain how to connect a mobile device, since that provides the most usefulness in today's world-- connecting to your ad-blocking VPN via a mobile device .  We'll go through two examples:   connect an iPhone using the OpenVPN Connect mobile app (see  here  for Android)  connect a Linux machine", 
            "title": "Connect a client using the .ovpn file"
        }, 
        {
            "location": "/guides/vpn/clients/#ios", 
            "text": "First make sure the OpenVPN connect app is installed on your phone or mobile device.  Import the  .ovpn  file into iOS.  There are several ways to do this, but be careful about transferring it over an insecure medium.   Airdrop the file from another device  Store the file in a cloud app and open it ion your device  Message the file to yourself (not recommended)  Email the file to yourself (not recommended)    WARNING  Anyone who gets his hands on this configuration/certificate file can obtain full access to your VPN. Make sure that you use only trusted paths for transferring the file (e.g. never send it via an un-encrypted channel, e.g. email or FTP). Best strategy is to use an USB thumb drive to avoid any network transport at all (when possible). Make sure to delete the certificate on the USB drive afterwards.  NOTICE  If one of your certificates has been compromised, remove it using option 2 when you run the installer and generate a new certificate. This will effectively lock out anyone who might have gotten access to the certificate.   Once you get it on your device, you can open the file in the OpenVPN app.    Click the green plus to add the profile to your phone.  You can connect from within the app or you can connect from the Settings app once you grant it access to do so.", 
            "title": "iOS"
        }, 
        {
            "location": "/guides/vpn/clients/#linux", 
            "text": "We'll demonstrate the procedure here for Ubuntu Linux (which trivially extends to Linux Mint, etc.)    Install the necessary network-manager plugins sudo apt-get install network-manager-openvpn network-manager-openvpn-gnome\nsudo service network-manager restart    Securely copy the necessary certificates from your OpenVPN server to your client (e.g. using  sftp ). They are located in  /etc/openvpn/easy-rsa/pki    You will need:   User Certificate:  /etc/openvpn/easy-rsa/pki/issued/client.crt  CA Certificate:  /etc/openvpn/easy-rsa/pki/ca.crt  Private Key:  /etc/openvpn/easy-rsa/pki/private/client.key  Private Key Password: Depending on your settings (might even be empty)  TA Key:  /etc/openvpn/ta.key   Further details can be found in the screenshots provided below:     \nYour whole network traffic will now securely be transferred to your Pi-hole.", 
            "title": "Linux"
        }, 
        {
            "location": "/guides/vpn/clients/#windows", 
            "text": "You will have to install additional software. See  https://openvpn.net/index.php/open-source/downloads.html", 
            "title": "Windows"
        }, 
        {
            "location": "/guides/vpn/android-client/", 
            "text": "Install the official OpenVPN App from the \nApp Store\n\n\n\n\n\n\nLog into your OpenVPN server and use the road warrior installer to create a new certificate for your device:\n\n\n\n\n\n\nroot@ubuntu-512mb-fra1-01:~# bash openvpn-install.sh\nLooks like OpenVPN is already installed\n\nWhat do you want to do?\n   1) Add a cert for a new user\n   2) Revoke existing user cert\n   3) Remove OpenVPN\n   4) Exit\nSelect an option [1-4]: 1\n\nTell me a name for the client cert\nPlease, use one word only, no special characters\nClient name: android\nGenerating a 2048 bit RSA private key\n.....+++\n..................................+++\nwriting new private key to \n...\n\n-----\nUsing configuration from /etc/openvpn/easy-rsa/openssl-1.0.cnf\nCheck that the request matches the signature\nSignature ok\nThe Subject\ns Distinguished Name is as follows\ncommonName            :ASN.1 12:\nandroid\n\nCertificate is to be certified until Jan 25 15:07:37 2027 GMT (3650 days)\n\nWrite out database with 1 new entries\nData Base Updated\n\nClient android added, configuration is available at /root/android.ovpn\n\n\n\n\n\n\nCopy the mentioned file (\n/root/android.ovpn\n) to your Android device (e.g. SD card) and import it in the app:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConnect to your OpenVPN server\n\n\n\n\n\n\n\n\nYou are ready to go!", 
            "title": "Android"
        }, 
        {
            "location": "/guides/vpn/only-dns-via-vpn/", 
            "text": "Optional: Only route DNS via VPN\n\n\nWith this setup, you will force connected clients to use \nonly the DNS provided by the VPN connection, i.e. the Pi-hole.\n  Do this only if you \ndon't\n want to tunnel all traffic from the client through the VPN, but only its DNS queries.\n\n\nEdit your \n/etc/openvpn/server.conf\n and remove (comment out) the following line:\n\n\n# push \nredirect-gateway def1 bypass-dhcp\n\n\n\n\n\nUsing a client config file\n\n\nThis works pretty much out of the box with common \nclient.ovpn\n files, like this provided one: \nclient.ovpn\n\n\nRemember to replace the locations of your keys and the address/host name of your server.\n\n\nUsing the Network Manager\n\n\nWhen using the Network Manager, you will have to do some additional setting on the client side of things:\n\n\n\n\nAlternative 1: Disable Network Manager's internal DNS server\n\n\nEdit \n/etc/NetworkManager/NetworkManager.conf\n:\n\n# dns=dnsmasq\n\n\nand restart the Network Manager:\n\nsudo restart network-manager\n\n\n\nWhen connecting your DNS server will now be properly picked up and used by your client.\n\n\nAlternative 2: Set DNS server address of your Pi-hole manually on the main interface\n\n\nYou can also set the address of the DNS server manually (use the device which actually connects to the internet, e.g. \neth0\n):\n\n\n\n\nAfter doing either alternative, you should see:\n\npi.hole has address W.X.Y.Z (outside address of your VPN server)\npi.hole has IPv6 address A:B:C:D:E:F (outside address of your VPN server)\n\n\n\nThe web interface of your Pi-hole will be visible at \nhttp://pi.hole/admin/\n (even with the recommended firewall configuration mentioned on another subpage)\n\n\n\n\n\n\nTroubleshooting\n\n\nIf your new DNS server configuration has not been activated (try restarting the interface / system) you will see\n\nhost pi.hole\nHost pi.hole not found: 3(NXDOMAIN)\n\n\n\nIf you are not connected to your VPN network you will see\n\nhost pi.hole\n;; connection timed out; no servers could be reached", 
            "title": "Optional: Only route DNS via VPN"
        }, 
        {
            "location": "/guides/vpn/only-dns-via-vpn/#optional-only-route-dns-via-vpn", 
            "text": "With this setup, you will force connected clients to use  only the DNS provided by the VPN connection, i.e. the Pi-hole.   Do this only if you  don't  want to tunnel all traffic from the client through the VPN, but only its DNS queries.  Edit your  /etc/openvpn/server.conf  and remove (comment out) the following line:  # push  redirect-gateway def1 bypass-dhcp", 
            "title": "Optional: Only route DNS via VPN"
        }, 
        {
            "location": "/guides/vpn/only-dns-via-vpn/#using-a-client-config-file", 
            "text": "This works pretty much out of the box with common  client.ovpn  files, like this provided one:  client.ovpn  Remember to replace the locations of your keys and the address/host name of your server.", 
            "title": "Using a client config file"
        }, 
        {
            "location": "/guides/vpn/only-dns-via-vpn/#using-the-network-manager", 
            "text": "When using the Network Manager, you will have to do some additional setting on the client side of things:", 
            "title": "Using the Network Manager"
        }, 
        {
            "location": "/guides/vpn/only-dns-via-vpn/#alternative-1-disable-network-managers-internal-dns-server", 
            "text": "Edit  /etc/NetworkManager/NetworkManager.conf : # dns=dnsmasq \nand restart the Network Manager: sudo restart network-manager  When connecting your DNS server will now be properly picked up and used by your client.", 
            "title": "Alternative 1: Disable Network Manager's internal DNS server"
        }, 
        {
            "location": "/guides/vpn/only-dns-via-vpn/#alternative-2-set-dns-server-address-of-your-pi-hole-manually-on-the-main-interface", 
            "text": "You can also set the address of the DNS server manually (use the device which actually connects to the internet, e.g.  eth0 ):   After doing either alternative, you should see: pi.hole has address W.X.Y.Z (outside address of your VPN server)\npi.hole has IPv6 address A:B:C:D:E:F (outside address of your VPN server)  The web interface of your Pi-hole will be visible at  http://pi.hole/admin/  (even with the recommended firewall configuration mentioned on another subpage)", 
            "title": "Alternative 2: Set DNS server address of your Pi-hole manually on the main interface"
        }, 
        {
            "location": "/guides/vpn/only-dns-via-vpn/#troubleshooting", 
            "text": "If your new DNS server configuration has not been activated (try restarting the interface / system) you will see host pi.hole\nHost pi.hole not found: 3(NXDOMAIN)  If you are not connected to your VPN network you will see host pi.hole\n;; connection timed out; no servers could be reached", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/guides/vpn/dual-operation/", 
            "text": "Up until now, this wiki has been about a server set up on a cloud host, available on the public Internet.  This section is aimed at a server setup in a private network like on a Raspberry Pi.\n\n\nSo if blocking works using \neth0\n but stops working for \ntun0\n, as described \nhere\n, you may want to run this command \npihole -a -i all\n, which should get the behaviour you want by opening dnsmasq up to listen on all ports. This is not recommended for cloud servers as they should \nnot\n be listening on \neth0\n.\n\n\nIf you want to set up your Pi-hole + OpenVPN such that you can use from both internal ((W)LAN) and external (VPN) networks, you have to apply some small changes. As additional benefit, you will be able to reach all devices in the internal network (e.g. computers, networking-aware printers, etc.) through the VPN.\n\n\nThis setup assumes that your local network is in the range \n192.168.2.0\n (i.e. device addresses are in the range of 192.168.2.1 - 192.168.2.254). If this is not the case for you, you have to adjust the settings, accordingly, e.g.\n\n\n\n\ndevices in 192.168.0.1 - 192.168.0.254 -\n \nroute 192.168.0.0\n\n\ndevices in 192.168.123.1 - 192.168.123.254 -\n \nroute 192.168.123.0\n\n\n\n\nEdit your \n/etc/openvpn/server.conf\n:\n\n\npush \nroute 192.168.2.0 255.255.255.0\n\npush \ndhcp-option DNS 192.168.2.123\n\n\n\n\n\nAs you can see, we change the address of the DNS server to the local IP address of our Pi-hole (which is \n192.168.2.123\n in this example).\n\n\nAfterwards, we change the interface of \nPi-hole\n to \neth0\n (your local network adapter instead of the VPN adapter \ntun0\n). This can conveniently be done by using \npihole -r\n + \nReconfigure\n.\n\n\nAfter a restart of the OpenVPN server, all clients should be able to see all devices within your (at home) local network. This is an example running on a distant server, which is connected through the VPN and can successfully communicate with all internal devices:\n\n\nme@client ~ $ ifconfig\neth0      Link encap:Ethernet  HWaddr e0:xx:xx:xx:xx:xx  \n          inet addr:134.x.x.x  Bcast:134.x.x.x  Mask:255.x.x.x\n          inet6 addr: X:X:X:X::X/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:3623911 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:2803670 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000 \n          RX bytes:1921375471 (1.9 GB)  TX bytes:1227835028 (1.2 GB)\n\nlo        Link encap:Local Loopback  \n          inet addr:127.0.0.1  Mask:255.0.0.0\n          inet6 addr: ::1/128 Scope:Host\n          UP LOOPBACK RUNNING  MTU:65536  Metric:1\n          RX packets:553426 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:553426 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1 \n          RX bytes:113417383 (113.4 MB)  TX bytes:113417383 (113.4 MB)\n\ntun0      Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  \n          inet addr:10.8.0.2  P-t-P:10.8.0.2  Mask:255.255.255.0\n          UP POINTOPOINT RUNNING NOARP MULTICAST  MTU:1500  Metric:1\n          RX packets:274676 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:331178 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:100 \n          RX bytes:43745313 (43.7 MB)  TX bytes:43956250 (43.9 MB)\n\nme@client ~ $ ping 192.168.2.123\nPING 192.168.2.123 (192.168.2.123) 56(84) bytes of data.\n64 bytes from 192.168.2.123: icmp_seq=1 ttl=64 time=18.9 ms\n64 bytes from 192.168.2.123: icmp_seq=2 ttl=64 time=18.9 ms\n64 bytes from 192.168.2.123: icmp_seq=3 ttl=64 time=18.9 ms\n64 bytes from 192.168.2.123: icmp_seq=4 ttl=64 time=18.7 ms\n64 bytes from 192.168.2.123: icmp_seq=5 ttl=64 time=18.7 ms\n64 bytes from 192.168.2.123: icmp_seq=6 ttl=64 time=19.0 ms\n^C\n--- 192.168.2.123 ping statistics ---\n6 packets transmitted, 6 received, 0% packet loss, time 5007ms\nrtt min/avg/max/mdev = 18.740/18.894/19.017/0.189 ms\n\n\n\n\nImportant last step\n\n\nThe undocumented \npihole -a -i all\n command is simply what runs when you choose \nListen on all interfaces, permit all origins (make sure your Pi-hole is firewalled)\n, which if you've read this far in the tutorial, you should understand that we don't want you to knowingly or unknowing set up an open resolver.", 
            "title": "Optional: Dual operation: LAN & VPN at the same time"
        }, 
        {
            "location": "/guides/vpn/dual-operation/#important-last-step", 
            "text": "The undocumented  pihole -a -i all  command is simply what runs when you choose  Listen on all interfaces, permit all origins (make sure your Pi-hole is firewalled) , which if you've read this far in the tutorial, you should understand that we don't want you to knowingly or unknowing set up an open resolver.", 
            "title": "Important last step"
        }, 
        {
            "location": "/guides/vpn/dual-VPN/", 
            "text": "Dual VPN Setup - Separate DNS and VPN Traffic\n\n\nIn order to separate VPN traffic from DNS queries you will need to run two VPN servers. One server routes the normal user traffic and the second routes only DNS requests. This can be done with two OpenVPN configurations.\n\n\nPrerequisites and Configuration\n\n\nYou should have an existing OpenVPN server configured and running. We are going to use the original configuration file located at \n/etc/openvpn/server.conf\n. \n\n\nFirst, copy the file:\n\n\nsudo cp /etc/openvpn/server.conf /etc/openvpn/server2.conf\n\n\n\n\nNext, exit the new copy of the configuration. We use the \nnano\n editor in this example, but any editor will work. Remember to edit under the root account via \nsudo\n.\n\n\nsudo nano /etc/openvpn/server2.conf\n\n\n\n\nWe will need to change the port to one different from the original, so that it does not conflict with the first instance of OpenVPN. Assuming you used the default port configuration, you should have 1194 as the port. You need to change this to a different value, making sure the port is available - 1195 should be.\n\n\nNext, if needed, port forward the newly configured port from your router to your device. You will also need to assign a different class of IP addresses that will serve this connection only. \n\n\nYour server line should look like this:\n\n\nserver 10.9.0.0 255.255.255.0\n\n\n\n\nMake sure that the DNS requests go though the instance of OpenVPN: \n\n\npush \ndhcp-option DNS 10.9.0.1\n\n\n\n\n\nOne other setting that we need to change is to comment out the \nbypass-dhcp\n instruction so that it looks like: \n\n\n# push \nredirect-gateway def1 bypass-dhcp\n`.\n\n\n\n\nCommenting out this line ensures that no traffic is routed via the VPN server.\n\n\nSave the file and start the second instance of OpenVPN:\n\n\nsystemctl start openvpn@server2.service\n\n\n\n\nIf your distribution does not have \nsystemctl\n you may use the command below to start an OpenVPN daemon with your second configuration:\n \n\n\n/usr/sbin/openvpn --daemon --writepid /var/run/openvpn/server2.pid --cd /etc/openvpn --config server2.conf --script-security \n2\n\n\n\n\n\nFinally, edit the existing \n.ovpn\n file used for the client connection. Update the port from the previous value to the port you used for the second instance of OpenVPN.\n\n\nTesting\n\n\nBefore testing, make sure that:\n\n\n\n\nPort forwarding is configured for the second instance of OpenVPN.\n\n\nps ax | grep openvpn\n shows two instances of OpenVPN running (with different configs).\n\n\nThe modified ovpn file is loaded on the client.\n\n\n\n\nNote: when connected to your DNS only VPN connection \nyou will not get a Pi-hole splash page when accessing a blocked domain directly.\n The page will not load or it may load with an error. \nThis is because the web server traffic is not routed through the VPN.\n We did not create an \niptables\n rule for masquerading, and the return packets (since they are not part of the same LAN subset as your VPN Client) are prevented.", 
            "title": "Optional: Full and DNS-only"
        }, 
        {
            "location": "/guides/vpn/dual-VPN/#dual-vpn-setup-separate-dns-and-vpn-traffic", 
            "text": "In order to separate VPN traffic from DNS queries you will need to run two VPN servers. One server routes the normal user traffic and the second routes only DNS requests. This can be done with two OpenVPN configurations.", 
            "title": "Dual VPN Setup - Separate DNS and VPN Traffic"
        }, 
        {
            "location": "/guides/vpn/dual-VPN/#prerequisites-and-configuration", 
            "text": "You should have an existing OpenVPN server configured and running. We are going to use the original configuration file located at  /etc/openvpn/server.conf .   First, copy the file:  sudo cp /etc/openvpn/server.conf /etc/openvpn/server2.conf  Next, exit the new copy of the configuration. We use the  nano  editor in this example, but any editor will work. Remember to edit under the root account via  sudo .  sudo nano /etc/openvpn/server2.conf  We will need to change the port to one different from the original, so that it does not conflict with the first instance of OpenVPN. Assuming you used the default port configuration, you should have 1194 as the port. You need to change this to a different value, making sure the port is available - 1195 should be.  Next, if needed, port forward the newly configured port from your router to your device. You will also need to assign a different class of IP addresses that will serve this connection only.   Your server line should look like this:  server 10.9.0.0 255.255.255.0  Make sure that the DNS requests go though the instance of OpenVPN:   push  dhcp-option DNS 10.9.0.1   One other setting that we need to change is to comment out the  bypass-dhcp  instruction so that it looks like:   # push  redirect-gateway def1 bypass-dhcp `.  Commenting out this line ensures that no traffic is routed via the VPN server.  Save the file and start the second instance of OpenVPN:  systemctl start openvpn@server2.service  If your distribution does not have  systemctl  you may use the command below to start an OpenVPN daemon with your second configuration:    /usr/sbin/openvpn --daemon --writepid /var/run/openvpn/server2.pid --cd /etc/openvpn --config server2.conf --script-security  2   Finally, edit the existing  .ovpn  file used for the client connection. Update the port from the previous value to the port you used for the second instance of OpenVPN.", 
            "title": "Prerequisites and Configuration"
        }, 
        {
            "location": "/guides/vpn/dual-VPN/#testing", 
            "text": "Before testing, make sure that:   Port forwarding is configured for the second instance of OpenVPN.  ps ax | grep openvpn  shows two instances of OpenVPN running (with different configs).  The modified ovpn file is loaded on the client.   Note: when connected to your DNS only VPN connection  you will not get a Pi-hole splash page when accessing a blocked domain directly.  The page will not load or it may load with an error.  This is because the web server traffic is not routed through the VPN.  We did not create an  iptables  rule for masquerading, and the return packets (since they are not part of the same LAN subset as your VPN Client) are prevented.", 
            "title": "Testing"
        }, 
        {
            "location": "/guides/vpn/dynDNS/", 
            "text": "If you operate your Pi-hole + OpenVPN at home, it is very likely that you are sitting behind a NAT / dynamically changing IP address. In this case, you should set up a dynamic DNS record, which allows you to reach your server. You can exchange the address that has been configured during the setup of OpenVPN like this:\n\n\nvim /etc/openvpn/client-common.txt\n\n\n\n\nLook for the \nremote\n line and adjust it accordingly (remove IP address, add host name), e.g.\n\n\nremote home.mydomain.de 1194\n\n\n\n\nThis change has to be repeated in each client config file (\n*.conf\n) that you have been created up till now.\n\n\nIf you have set up a DDNS domain for your IP address, you will likely need to add a host-record to Pi-hole's settings.\n\n\npihole -a hostrecord home.mydomain.de 192.168.1.10\n\n\n\n\nIf you don't do this, clients (like the Android OpenVPN client) will not able to connect to the VPN server when \ninside the internal network\n (while it will work from outside).  Afterwards, the client will be able to connect to the VPN server both from inside and outside you local network.", 
            "title": "Optional: Dynamic DNS"
        }
    ]
}